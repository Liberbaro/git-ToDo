{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\task-toogle\\\\task-toggle.jsx\";\n\n/* eslint-disable react/prop-types,react/no-unused-state */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './task-toggle.css';\nexport default class TaskToggle extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      changes: false\n    };\n\n    this.onKeyDownInputFieldHandler = e => {\n      const {\n        id,\n        saveNewTaskValue\n      } = this.props; // { changes } = this.state;\n      // eslint-disable-next-line no-undef,no-unused-expressions\n\n      this.setState(() => {\n        !changes;\n      }); // eslint-disable-next-line react/destructuring-assignment\n\n      console.log(this.state.changes);\n      return e.keyCode === 13 ? saveNewTaskValue(id, e) : null;\n    };\n  }\n\n  render() {\n    const {\n      className,\n      type,\n      text,\n      changeTaskStatus,\n      id\n    } = this.props,\n          inputField = /*#__PURE__*/_jsxDEV(\"input\", {\n      onKeyDown: this.onKeyDownInputFieldHandler,\n      defaultValue: text,\n      type: type,\n      className: className\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this),\n          checkbox = /*#__PURE__*/_jsxDEV(\"input\", {\n      onClick: () => changeTaskStatus(id),\n      type: type,\n      className: className\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n\n    return className === 'edit' ? inputField : checkbox;\n  }\n\n} // const TaskToggle = ({ className, type, text, changeTaskStatus, id, saveNewTaskValue }) => {\n//   function onKeyDownInputFieldHandler(e) {\n//     return e.keyCode === 13 ? saveNewTaskValue(id, e) : null;\n//   }\n//\n//   const inputField = (\n//           <input\n//             onKeyDown={onKeyDownInputFieldHandler}\n//             defaultValue={text}\n//             type={type}\n//             className={className} />\n//         ),\n//         checkbox = (\n//           <input onClick={() => changeTaskStatus(id)} type={type} className={className} />\n//         );\n//\n//   return className === 'edit' ? inputField : checkbox;\n// };\n//\n// TaskToggle.defaultProps = {\n//   saveEditingTask: () => {},\n//   changeTaskStatus: () => {},\n// };\n//\n// TaskToggle.propTypes = {\n//   saveEditingTask: PropTypes.func,\n//   changeTaskStatus: PropTypes.func,\n//   className: PropTypes.string.isRequired,\n//   type: PropTypes.string.isRequired,\n//   text: PropTypes.string.isRequired,\n// };\n//\n// export default TaskToggle;\n\nTaskToggle.defaultProps = {\n  changeTaskStatus: () => {}\n};\nTaskToggle.propTypes = {\n  changeTaskStatus: PropTypes.func,\n  className: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["D:/project/react/todo/src/components/task-toogle/task-toggle.jsx"],"names":["React","Component","PropTypes","TaskToggle","state","changes","onKeyDownInputFieldHandler","e","id","saveNewTaskValue","props","setState","console","log","keyCode","render","className","type","text","changeTaskStatus","inputField","checkbox","defaultProps","propTypes","func","string","isRequired"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,mBAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAUhDG,KAVgD,GAUxC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAVwC;;AAAA,SAyBhDC,0BAzBgD,GAyBpBC,CAAD,IAAO;AAChC,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAA2B,KAAKC,KAAtC,CADgC,CAEhC;AACA;;AACA,WAAKC,QAAL,CAAc,MAAM;AAAE,SAACN,OAAD;AAAW,OAAjC,EAJgC,CAKhC;;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWC,OAAvB;AACA,aAAOE,CAAC,CAACO,OAAF,KAAc,EAAd,GAAmBL,gBAAgB,CAACD,EAAD,EAAKD,CAAL,CAAnC,GAA6C,IAApD;AACD,KAjC+C;AAAA;;AAmChDQ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,IAAb;AAAmBC,MAAAA,IAAnB;AAAyBC,MAAAA,gBAAzB;AAA2CX,MAAAA;AAA3C,QAAkD,KAAKE,KAA7D;AAAA,UACMU,UAAU,gBACR;AACE,MAAA,SAAS,EAAE,KAAKd,0BADlB;AAEE,MAAA,YAAY,EAAEY,IAFhB;AAGE,MAAA,IAAI,EAAED,IAHR;AAIE,MAAA,SAAS,EAAED;AAJb;AAAA;AAAA;AAAA;AAAA,YAFR;AAAA,UAQMK,QAAQ,gBACN;AAAO,MAAA,OAAO,EAAE,MAAMF,gBAAgB,CAACX,EAAD,CAAtC;AAA4C,MAAA,IAAI,EAAES,IAAlD;AAAwD,MAAA,SAAS,EAAED;AAAnE;AAAA;AAAA;AAAA;AAAA,YATR;;AAWA,WAAOA,SAAS,KAAK,MAAd,GAAuBI,UAAvB,GAAoCC,QAA3C;AACD;;AAhD+C,C,CAmDlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnFqBlB,U,CACZmB,Y,GAAe;AAAEH,EAAAA,gBAAgB,EAAE,MAAM,CAAE;AAA5B,C;AADHhB,U,CAGZoB,S,GAAY;AACjBJ,EAAAA,gBAAgB,EAAEjB,SAAS,CAACsB,IADX;AAEjBR,EAAAA,SAAS,EAAEd,SAAS,CAACuB,MAAV,CAAiBC,UAFX;AAGjBT,EAAAA,IAAI,EAAEf,SAAS,CAACuB,MAAV,CAAiBC,UAHN;AAIjBR,EAAAA,IAAI,EAAEhB,SAAS,CAACuB,MAAV,CAAiBC;AAJN,C","sourcesContent":["/* eslint-disable react/prop-types,react/no-unused-state */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './task-toggle.css';\n\nexport default class TaskToggle extends Component {\n  static defaultProps = { changeTaskStatus: () => {} };\n\n  static propTypes = {\n    changeTaskStatus: PropTypes.func,\n    className: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n  };\n\n  state = { changes: false }\n  //\n  // tick = () => {\n  //   const { changes } = this.state;\n  //   if(changes)\n  // }\n  //\n  // componentDidMount = () => {\n  //   this.intervalID = setInterval(() => this.tick(), 1000);\n  // };\n  //\n  // componentWillUnmount = () => {\n  //   clearInterval(this.intervalID);\n  // };\n\n  onKeyDownInputFieldHandler=(e) => {\n    const { id, saveNewTaskValue } = this.props;\n    // { changes } = this.state;\n    // eslint-disable-next-line no-undef,no-unused-expressions\n    this.setState(() => { !changes; });\n    // eslint-disable-next-line react/destructuring-assignment\n    console.log(this.state.changes);\n    return e.keyCode === 13 ? saveNewTaskValue(id, e) : null;\n  }\n\n  render() {\n    const { className, type, text, changeTaskStatus, id } = this.props,\n          inputField = (\n            <input\n              onKeyDown={this.onKeyDownInputFieldHandler}\n              defaultValue={text}\n              type={type}\n              className={className} />\n          ),\n          checkbox = (\n            <input onClick={() => changeTaskStatus(id)} type={type} className={className} />\n          );\n    return className === 'edit' ? inputField : checkbox;\n  }\n}\n\n// const TaskToggle = ({ className, type, text, changeTaskStatus, id, saveNewTaskValue }) => {\n//   function onKeyDownInputFieldHandler(e) {\n//     return e.keyCode === 13 ? saveNewTaskValue(id, e) : null;\n//   }\n//\n//   const inputField = (\n//           <input\n//             onKeyDown={onKeyDownInputFieldHandler}\n//             defaultValue={text}\n//             type={type}\n//             className={className} />\n//         ),\n//         checkbox = (\n//           <input onClick={() => changeTaskStatus(id)} type={type} className={className} />\n//         );\n//\n//   return className === 'edit' ? inputField : checkbox;\n// };\n//\n// TaskToggle.defaultProps = {\n//   saveEditingTask: () => {},\n//   changeTaskStatus: () => {},\n// };\n//\n// TaskToggle.propTypes = {\n//   saveEditingTask: PropTypes.func,\n//   changeTaskStatus: PropTypes.func,\n//   className: PropTypes.string.isRequired,\n//   type: PropTypes.string.isRequired,\n//   text: PropTypes.string.isRequired,\n// };\n//\n// export default TaskToggle;\n"]},"metadata":{},"sourceType":"module"}