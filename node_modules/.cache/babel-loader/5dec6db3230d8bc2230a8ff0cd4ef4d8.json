{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.js\";\nimport React, { Component } from 'react';\nimport Header from \"../header/header\";\nimport Main from \"../main/main\";\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.taskId = 100;\n    this.state = {\n      listToDo: []\n    };\n\n    this.getTaskFromListToDo = (key, listToDo) => {\n      const index = this.getTaskIndex(key);\n      return listToDo[index];\n    };\n\n    this.changeListToDo = (key, cb) => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newListToDo = this.getNewListToDo(),\n              index = this.getTaskIndex(key),\n              task = this.getTaskFromListToDo(key, newListToDo);\n        cb(newListToDo, index, task);\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n\n    this.removeTaskFromToDoList = key => {\n      this.changeListToDo(key, (newListToDo, index) => newListToDo.splice(index, 1));\n    };\n\n    this.changeTaskStatus = key => {\n      this.changeListToDo(key, (arg1, arg2, task) => {\n        task.className = task.done ? '' : 'completed';\n        task.done = !task.done;\n      });\n    };\n\n    this.editTaskValue = key => {\n      this.changeListToDo(key, (arg1, arg2, task) => {\n        task.className = 'editing';\n      });\n    };\n\n    this.saveNewTaskValue = (key, e) => {\n      this.changeListToDo(key, (arg, arg2, task) => {\n        task.text = e.target.value;\n        task.className = task.done ? 'completed' : '';\n      });\n    };\n\n    this.selectTaskFilter = label => {\n      this.changeListToDo(100, newListToDo => {\n        newListToDo.map(el => {\n          if (label === 'all') el.display = 'block';else el.display = el.className === label ? 'block' : 'none';\n          return el;\n        });\n      });\n    };\n\n    this.clearCompletedTasks = () => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newListToDo = listToDo.filter(({\n          className\n        }) => className !== 'completed');\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n\n    this.addTaskToListToDo = text => {\n      this.changeListToDo(100, newListToDo => {\n        const newTask = this.createNewTask(text);\n        newListToDo.unshift(newTask);\n      });\n    };\n  }\n\n  createNewTask(text) {\n    return {\n      text: text,\n      className: '',\n      key: this.taskId++,\n      done: false,\n      display: 'block',\n      timeOfCreate: new Date().getTime() // на Date пробрасывает ошибку при добавлении новый экземпляров.\n\n    };\n  }\n\n  getTaskIndex(key) {\n    return this.state.listToDo.findIndex(el => el.key === key);\n  }\n\n  getNewListToDo() {\n    return JSON.parse(JSON.stringify(this.state.listToDo));\n  }\n\n  render() {\n    const {\n      listToDo\n    } = this.state;\n    const countTasksLeft = listToDo.filter(({\n      done\n    }) => !done).length;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        addTaskToListToDo: this.addTaskToListToDo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        taskList: listToDo,\n        countTasksLeft: countTasksLeft,\n        clearCompletedTasks: this.clearCompletedTasks,\n        selectTaskFilter: this.selectTaskFilter,\n        saveEditingTask: this.saveNewTaskValue,\n        changeTaskStatus: this.changeTaskStatus,\n        editTaskValue: this.editTaskValue,\n        deleteTask: this.removeTaskFromToDoList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.js"],"names":["React","Component","Header","Main","App","taskId","state","listToDo","getTaskFromListToDo","key","index","getTaskIndex","changeListToDo","cb","setState","newListToDo","getNewListToDo","task","removeTaskFromToDoList","splice","changeTaskStatus","arg1","arg2","className","done","editTaskValue","saveNewTaskValue","e","arg","text","target","value","selectTaskFilter","label","map","el","display","clearCompletedTasks","filter","addTaskToListToDo","newTask","createNewTask","unshift","timeOfCreate","Date","getTime","findIndex","JSON","parse","stringify","render","countTasksLeft","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Header from \"../header/header\";\r\nimport Main from \"../main/main\";\r\nimport './app.css';\r\n\r\nexport default class App extends Component {\r\n\r\n    taskId = 100;\r\n\r\n    state = {\r\n        listToDo: []\r\n    }\r\n\r\n    createNewTask(text) {\r\n        return {\r\n            text: text,\r\n            className: '',\r\n            key: this.taskId++,\r\n            done: false,\r\n            display: 'block',\r\n            timeOfCreate: new Date().getTime()// на Date пробрасывает ошибку при добавлении новый экземпляров.\r\n        }\r\n    }\r\n\r\n    getTaskIndex(key) {\r\n        return this.state.listToDo.findIndex((el) => el.key === key);\r\n    }\r\n\r\n    getNewListToDo() {\r\n        return JSON.parse(JSON.stringify(this.state.listToDo));\r\n    }\r\n\r\n    getTaskFromListToDo = (key, listToDo) => {\r\n        const index = this.getTaskIndex(key);\r\n        return listToDo[index];\r\n    }\r\n\r\n    changeListToDo = (key, cb) => {\r\n        this.setState(({listToDo}) => {\r\n            const newListToDo = this.getNewListToDo(),\r\n                  index = this.getTaskIndex(key),\r\n                  task = this.getTaskFromListToDo(key, newListToDo);\r\n            cb(newListToDo, index, task);\r\n            return {\r\n                listToDo: newListToDo\r\n            }\r\n        });\r\n    }\r\n\r\n    removeTaskFromToDoList = (key) => {\r\n        this.changeListToDo(key, (newListToDo, index) => newListToDo.splice(index, 1));\r\n    }\r\n\r\n    changeTaskStatus = (key) => {\r\n        this.changeListToDo(key, (arg1, arg2, task) => {\r\n            task.className = task.done ? '' : 'completed';\r\n            task.done = !task.done;\r\n        });\r\n    }\r\n\r\n    editTaskValue = (key) => {\r\n        this.changeListToDo(key, (arg1, arg2, task) => {\r\n            task.className = 'editing';\r\n        });\r\n    }\r\n\r\n    saveNewTaskValue = (key, e) => {\r\n        this.changeListToDo(key, (arg, arg2, task) => {\r\n            task.text = e.target.value;\r\n            task.className = task.done ? 'completed' : '';\r\n        });\r\n    }\r\n\r\n    selectTaskFilter = (label) => {\r\n        this.changeListToDo(100, (newListToDo) => {\r\n            newListToDo.map((el) => {\r\n                if (label === 'all') el.display = 'block';\r\n                else  el.display = (el.className === label) ? 'block' :  'none';\r\n                return el;\r\n            })\r\n        })\r\n    }\r\n\r\n    clearCompletedTasks = () => {\r\n        this.setState(({listToDo}) => {\r\n            const newListToDo = listToDo.filter(({className}) => className !== 'completed');\r\n            return { listToDo: newListToDo };\r\n        })\r\n    }\r\n\r\n    addTaskToListToDo = (text) => {\r\n        this.changeListToDo(100, (newListToDo) => {\r\n            const newTask = this.createNewTask(text);\r\n            newListToDo.unshift(newTask);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {listToDo} = this.state;\r\n        const countTasksLeft = listToDo.filter(({done}) => !done).length;\r\n        return (\r\n            <section className='todoapp'>\r\n                <Header addTaskToListToDo={this.addTaskToListToDo}/>\r\n                <Main taskList={listToDo}\r\n                      countTasksLeft={countTasksLeft}\r\n                      clearCompletedTasks={this.clearCompletedTasks}\r\n                      selectTaskFilter={this.selectTaskFilter}\r\n                      saveEditingTask={this.saveNewTaskValue}\r\n                      changeTaskStatus={this.changeTaskStatus}\r\n                      editTaskValue={this.editTaskValue}\r\n                      deleteTask={this.removeTaskFromToDoList} />\r\n            </section>\r\n        );\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}