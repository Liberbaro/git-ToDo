{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.js\";\nimport React, { Component } from 'react';\nimport Header from \"../header/header\";\nimport Main from \"../main/main\";\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.maxID = 666;\n    this.state = {\n      listToDo: [this.createNewTask('Completed'), this.createNewTask('Editing'), this.createNewTask('Active'), this.createNewTask('Закончить приложение')]\n    };\n\n    this.getTaskFromState = (id, newList) => {\n      const index = this.getIndex(id);\n      return newList[index];\n    };\n\n    this.mainFunctions = (id, what) => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = this.getNewListToDo();\n        const task = this.getTaskFromState(id, newList);\n        what();\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.changeStatus = id => {\n      function what() {\n        {\n          if (task.done === false) {\n            task.className = 'completed';\n            task.done = true;\n          } else {\n            task.className = '';\n            task.done = false;\n          }\n        }\n      }\n\n      this.mainFunctions(id, what); // this.setState(({listToDo})=>{\n      //     const newList = this.getNewListToDo();\n      //     const task = this.getTaskFromState(id, newList)\n      //     if( task.done === false){\n      //         task.className = 'completed';\n      //         task.done = true;\n      //     } else {\n      //         task.className = '';\n      //         task.done = false\n      //     }\n      //     return {\n      //         listToDo: newList\n      //     }\n      // })\n    };\n\n    this.deleteTask = id => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = this.getNewListToDo();\n        const inx = this.getIndex(id);\n        newList.splice(inx, 1);\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.editingTask = id => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = this.getNewListToDo();\n        const task = this.getTaskFromState(id, newList);\n        task.className = 'editing';\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.editTask = (id, event) => {\n      if (event.keyCode == 13) {\n        this.setState(({\n          listToDo\n        }) => {\n          const val = event.target.value;\n          const newList = this.getNewListToDo();\n          const task = this.getTaskFromState(id, newList);\n          task.text = val;\n          task.done === false ? task.className = '' : task.className = 'completed';\n          return {\n            listToDo: newList\n          };\n        });\n      }\n    };\n  }\n\n  createNewTask(text) {\n    return {\n      text: text,\n      className: '',\n      id: this.maxID++,\n      done: false\n    };\n  }\n\n  getIndex(id) {\n    return this.state.listToDo.findIndex(el => el.id === id);\n  }\n\n  getNewListToDo() {\n    return JSON.parse(JSON.stringify(this.state.listToDo));\n  }\n\n  render() {\n    const {\n      listToDo\n    } = this.state;\n    const countTaskLeft = listToDo.filter(({\n      done\n    }) => done === false).length;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        addElement: this.addElement,\n        changeStatus: this.changeStatus,\n        taskEditing: this.taskEditing,\n        createNewTask: this.createNewTask,\n        taskList: this.state.listToDo,\n        editingTask: this.editingTask,\n        deleteTask: this.deleteTask,\n        editTask: this.editTask,\n        countTaskLeft: countTaskLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this);\n  }\n\n} // Попроболвал от рефакторить\n//\n// changeStatus= (id)=>{\n//\n//     this.setState(({listToDo})=>{\n//         const newList = this.getNewListToDo();\n//         const task = this.getTaskFromState(id, newList)\n//         if( task.done === false){\n//             task.className = 'completed';\n//             task.done = true;\n//         } else {\n//             task.className = '';\n//             task.done = false\n//         }\n//         return {\n//             listToDo: newList\n//         }\n//     })\n// }\n//\n// deleteTask =(id)=>{\n//     this.setState(({listToDo})=>{\n//         const newList = this.getNewListToDo();\n//         const inx = this.getIndex(id)\n//         newList.splice(inx, 1)\n//         return {\n//             listToDo: newList\n//         }\n//     })\n// }\n//\n//\n//\n// editingTask= (id)=>{\n//     this.setState(({listToDo})=>{\n//         const newList = this.getNewListToDo();\n//         const task = this.getTaskFromState(id,newList)\n//         task.className = 'editing';\n//         return {\n//             listToDo: newList\n//         }\n//     })\n// }\n//\n// editTask =(id,event)=>{\n//     if(event.keyCode == 13){\n//         this.setState(({listToDo})=>{\n//             const val = event.target.value\n//             const newList = this.getNewListToDo();\n//             const task = this.getTaskFromState(id,newList)\n//             task.text = val\n//             task.done === false?  task.className = '': task.className = 'completed'\n//             return {\n//                 listToDo: newList\n//             }\n//         })\n//     }\n//\n// }\n// addElement =()=>{\n//     this.setState(({listToDo})=>{\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\n//         const newElement = this.createNewTask('random')\n//         newArr.unshift(newElement)\n//         return  {\n//             listToDo: newArr\n//         }\n//     })\n// }","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.js"],"names":["React","Component","Header","Main","App","maxID","state","listToDo","createNewTask","getTaskFromState","id","newList","index","getIndex","mainFunctions","what","setState","getNewListToDo","task","changeStatus","done","className","deleteTask","inx","splice","editingTask","editTask","event","keyCode","val","target","value","text","findIndex","el","JSON","parse","stringify","render","countTaskLeft","filter","length","addElement","taskEditing"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Header from \"../header/header\";\r\nimport Main from \"../main/main\";\r\nimport './app.css'\r\n\r\nexport default class App extends Component{\r\n\r\n    maxID = 666;\r\n    state = {\r\n        listToDo: [\r\n            this.createNewTask('Completed'),\r\n            this.createNewTask('Editing'),\r\n            this.createNewTask('Active'),\r\n            this.createNewTask('Закончить приложение'),\r\n        ]\r\n    }\r\n\r\n    createNewTask (text){\r\n        return {\r\n            text: text,\r\n            className: '',\r\n            id:  this.maxID++,\r\n            done: false\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    getIndex (id){\r\n           return this.state.listToDo.findIndex((el)=>el.id === id)\r\n    }\r\n\r\n    getNewListToDo (){\r\n        return JSON.parse(JSON.stringify(this.state.listToDo))\r\n    }\r\n\r\n    getTaskFromState = (id,newList)=>{\r\n        const index = this.getIndex(id)\r\n        return newList[index]\r\n    }\r\n\r\n    mainFunctions = (id, what)=>{\r\n        this.setState(({listToDo})=>{\r\n            const newList = this.getNewListToDo();\r\n            const task = this.getTaskFromState(id, newList)\r\n            what()\r\n            return {\r\n                listToDo: newList\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    changeStatus= (id)=>{\r\n      function what(){\r\n         {\r\n              if( task.done === false){\r\n                  task.className = 'completed';\r\n                  task.done = true;\r\n              } else {\r\n                  task.className = '';\r\n                  task.done = false\r\n              }\r\n          }\r\n\r\n      }\r\n        this.mainFunctions(id, what)\r\n        // this.setState(({listToDo})=>{\r\n        //     const newList = this.getNewListToDo();\r\n        //     const task = this.getTaskFromState(id, newList)\r\n        //     if( task.done === false){\r\n        //         task.className = 'completed';\r\n        //         task.done = true;\r\n        //     } else {\r\n        //         task.className = '';\r\n        //         task.done = false\r\n        //     }\r\n        //     return {\r\n        //         listToDo: newList\r\n        //     }\r\n        // })\r\n    }\r\n\r\n    deleteTask =(id)=>{\r\n        this.setState(({listToDo})=>{\r\n            const newList = this.getNewListToDo();\r\n            const inx = this.getIndex(id)\r\n            newList.splice(inx, 1)\r\n            return {\r\n                listToDo: newList\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    editingTask= (id)=>{\r\n        this.setState(({listToDo})=>{\r\n            const newList = this.getNewListToDo();\r\n            const task = this.getTaskFromState(id,newList)\r\n            task.className = 'editing';\r\n            return {\r\n                listToDo: newList\r\n            }\r\n        })\r\n    }\r\n\r\n    editTask =(id,event)=>{\r\n        if(event.keyCode == 13){\r\n         this.setState(({listToDo})=>{\r\n             const val = event.target.value\r\n             const newList = this.getNewListToDo();\r\n             const task = this.getTaskFromState(id,newList)\r\n             task.text = val\r\n             task.done === false?  task.className = '': task.className = 'completed'\r\n             return {\r\n                 listToDo: newList\r\n             }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const {listToDo} = this.state\r\n        const  countTaskLeft = listToDo.filter(({done})=>done ===false).length\r\n    return (\r\n        <section className='todoapp'>\r\n            <Header/>\r\n            <Main addElement={this.addElement}\r\n                  changeStatus={this.changeStatus}\r\n                  taskEditing={this.taskEditing}\r\n                  createNewTask={this.createNewTask}\r\n                  taskList={this.state.listToDo}\r\n                  editingTask={this.editingTask}\r\n                  deleteTask={this.deleteTask}\r\n                  editTask={this.editTask}\r\n                  countTaskLeft={countTaskLeft}/>\r\n        </section>\r\n    );\r\n}\r\n\r\n}\r\n\r\n// Попроболвал от рефакторить\r\n//\r\n// changeStatus= (id)=>{\r\n//\r\n//     this.setState(({listToDo})=>{\r\n//         const newList = this.getNewListToDo();\r\n//         const task = this.getTaskFromState(id, newList)\r\n//         if( task.done === false){\r\n//             task.className = 'completed';\r\n//             task.done = true;\r\n//         } else {\r\n//             task.className = '';\r\n//             task.done = false\r\n//         }\r\n//         return {\r\n//             listToDo: newList\r\n//         }\r\n//     })\r\n// }\r\n//\r\n// deleteTask =(id)=>{\r\n//     this.setState(({listToDo})=>{\r\n//         const newList = this.getNewListToDo();\r\n//         const inx = this.getIndex(id)\r\n//         newList.splice(inx, 1)\r\n//         return {\r\n//             listToDo: newList\r\n//         }\r\n//     })\r\n// }\r\n//\r\n//\r\n//\r\n// editingTask= (id)=>{\r\n//     this.setState(({listToDo})=>{\r\n//         const newList = this.getNewListToDo();\r\n//         const task = this.getTaskFromState(id,newList)\r\n//         task.className = 'editing';\r\n//         return {\r\n//             listToDo: newList\r\n//         }\r\n//     })\r\n// }\r\n//\r\n// editTask =(id,event)=>{\r\n//     if(event.keyCode == 13){\r\n//         this.setState(({listToDo})=>{\r\n//             const val = event.target.value\r\n//             const newList = this.getNewListToDo();\r\n//             const task = this.getTaskFromState(id,newList)\r\n//             task.text = val\r\n//             task.done === false?  task.className = '': task.className = 'completed'\r\n//             return {\r\n//                 listToDo: newList\r\n//             }\r\n//         })\r\n//     }\r\n//\r\n// }\r\n\r\n\r\n\r\n\r\n// addElement =()=>{\r\n//     this.setState(({listToDo})=>{\r\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n//         const newElement = this.createNewTask('random')\r\n//         newArr.unshift(newElement)\r\n//         return  {\r\n//             listToDo: newArr\r\n//         }\r\n//     })\r\n// }\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}