{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from \"../header/header\";\nimport Main from \"../main/main\";\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.maxID = 666;\n    this.state = {\n      listToDo: [this.createNewTask('Рефакторинг'), this.createNewTask('Редактирование пустых задач'), this.createNewTask('Корректая дата'), this.createNewTask('Закончить приложение')]\n    };\n\n    this.getTaskFromState = (id, newList) => {\n      const index = this.getIndex(id);\n      return newList[index];\n    };\n\n    this.changeState = (id, cb) => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newListToDo = this.getNewListToDo();\n        const task = this.getTaskFromState(id, newListToDo);\n        const index = this.getIndex(id);\n        cb(newListToDo, index, task);\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n\n    this.clearCompleted = () => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = listToDo.filter(el => el.className !== 'completed');\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.onfilteredList = label => {\n      this.changeState(666, newListToDo => {\n        newListToDo.map(el => {\n          if (label === 'all') el.display = 'block';else el.className === label ? el.display = 'block' : el.display = 'none';\n          return el;\n        });\n      });\n    };\n\n    this.addElement = text => {\n      console.log(text);\n      this.changeState(666, newListToDo => {\n        const newElement = this.createNewTask(text);\n        newListToDo.unshift(newElement);\n      });\n    };\n\n    this.changeStatus = id => {\n      this.changeState(id, (arg1, arg2, task) => {\n        task.className = task.done ? '' : 'completed';\n        task.done = !task.done;\n      });\n    };\n\n    this.deleteTask = id => {\n      this.changeState(id, (newListToDo, index) => newListToDo.splice(index, 1));\n    };\n\n    this.editingTask = id => {\n      this.changeState(id, (arg1, arg2, task) => {\n        task.className = 'editing';\n      });\n    };\n\n    this.editTask = (id, event) => {\n      this.changeState(id, (arg, arg2, task) => {\n        if (event.keyCode === 13) {\n          task.text = event.target.value;\n          task.done === false ? task.className = '' : task.className = 'completed';\n        }\n      });\n    };\n  }\n\n  createNewTask(text) {\n    return {\n      text: text,\n      className: '',\n      id: this.maxID++,\n      done: false,\n      display: 'block',\n      timeOfCreate: new Date().getHours()\n    };\n  }\n\n  getIndex(id) {\n    return this.state.listToDo.findIndex(el => el.id === id);\n  }\n\n  getNewListToDo() {\n    return JSON.parse(JSON.stringify(this.state.listToDo));\n  }\n\n  render() {\n    const {\n      listToDo\n    } = this.state;\n    const countTaskLeft = listToDo.filter(({\n      done\n    }) => done === false).length;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        createNewTask: this.createNewTask,\n        addElement: this.addElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        addElement: this.addElement,\n        changeStatus: this.changeStatus,\n        taskEditing: this.taskEditing,\n        createNewTask: this.createNewTask,\n        taskList: this.state.listToDo,\n        editingTask: this.editingTask,\n        deleteTask: this.deleteTask,\n        editTask: this.editTask,\n        countTaskLeft: countTaskLeft,\n        onfilteredList: this.onfilteredList,\n        clearCompleted: this.clearCompleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this);\n  }\n\n}\nApp.propTypes = {\n  createNewTask: PropTypes.string,\n  getIndex: PropTypes.array\n};","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.js"],"names":["React","Component","PropTypes","Header","Main","App","maxID","state","listToDo","createNewTask","getTaskFromState","id","newList","index","getIndex","changeState","cb","setState","newListToDo","getNewListToDo","task","clearCompleted","filter","el","className","onfilteredList","label","map","display","addElement","text","console","log","newElement","unshift","changeStatus","arg1","arg2","done","deleteTask","splice","editingTask","editTask","event","arg","keyCode","target","value","timeOfCreate","Date","getHours","findIndex","JSON","parse","stringify","render","countTaskLeft","length","taskEditing","propTypes","string","array"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Header from \"../header/header\";\r\nimport Main from \"../main/main\";\r\nimport './app.css'\r\n\r\nexport default class App extends Component{\r\n\r\n    maxID = 666;\r\n    state = {\r\n        listToDo: [\r\n            this.createNewTask('Рефакторинг'),\r\n            this.createNewTask('Редактирование пустых задач'),\r\n            this.createNewTask('Корректая дата'),\r\n            this.createNewTask('Закончить приложение'),\r\n        ]\r\n    }\r\n\r\n    static propTypes = {\r\n        createNewTask: PropTypes.string,\r\n        getIndex: PropTypes.array,\r\n    }\r\n\r\n    createNewTask (text){\r\n        return {\r\n            text: text,\r\n            className: '',\r\n            id:  this.maxID++,\r\n            done: false,\r\n            display: 'block',\r\n            timeOfCreate: new Date().getHours(),\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getIndex (id){\r\n           return this.state.listToDo.findIndex((el)=>el.id === id);\r\n    }\r\n\r\n    getNewListToDo (){\r\n        return JSON.parse(JSON.stringify(this.state.listToDo));\r\n    }\r\n\r\n    getTaskFromState = (id,newList)=>{\r\n        const index = this.getIndex(id);\r\n        return newList[index];\r\n    }\r\n\r\n    changeState = (id, cb)=>{\r\n        this.setState(({listToDo})=>{\r\n            const newListToDo = this.getNewListToDo();\r\n            const task = this.getTaskFromState(id, newListToDo);\r\n            const index = this.getIndex(id);\r\n            cb(newListToDo, index, task);\r\n            return {\r\n                listToDo: newListToDo\r\n            }\r\n        });\r\n    }\r\n\r\n    clearCompleted = ()=>{\r\n        this.setState(({listToDo})=>{\r\n            const newList =  listToDo.filter((el)=> el.className !== 'completed')\r\n            return {listToDo: newList}\r\n        })\r\n    }\r\n\r\n    onfilteredList =(label)=>{\r\n        this.changeState(666, (newListToDo)=>{\r\n            newListToDo.map((el)=> {\r\n                if(label === 'all') el.display = 'block';\r\n                else el.className === label? el.display = 'block': el.display = 'none'\r\n                return el\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    addElement =(text)=>{\r\n        console.log(text)\r\n        this.changeState(666, (newListToDo)=>{\r\n            const newElement = this.createNewTask(text)\r\n            newListToDo.unshift(newElement)\r\n        })\r\n    }\r\n\r\n\r\n    changeStatus= (id)=>{\r\n            this.changeState(id, (arg1, arg2, task)=> {\r\n                task.className = task.done?  '' : 'completed';\r\n                task.done = !task.done\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    deleteTask =(id)=>{\r\n        this.changeState(id, (newListToDo, index)=>  newListToDo.splice(index, 1));\r\n\r\n    }\r\n\r\n\r\n\r\n    editingTask= (id)=>{\r\n        this.changeState(id, (arg1, arg2, task)=>{\r\n            task.className = 'editing';\r\n        });\r\n    }\r\n\r\n    editTask =(id,event)=>{\r\n\r\n        this.changeState(id, (arg, arg2, task)=>{\r\n            if (event.keyCode === 13) {\r\n                task.text = event.target.value;\r\n                task.done === false ? task.className = '' : task.className = 'completed';\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const {listToDo} = this.state;\r\n        const  countTaskLeft = listToDo.filter(({done})=>done ===false).length;\r\n    return (\r\n        <section className='todoapp'>\r\n            <Header  createNewTask={this.createNewTask}\r\n                     addElement={this.addElement}/>\r\n            <Main addElement={this.addElement}\r\n                  changeStatus={this.changeStatus}\r\n                  taskEditing={this.taskEditing}\r\n                  createNewTask={this.createNewTask}\r\n                  taskList={this.state.listToDo}\r\n                  editingTask={this.editingTask}\r\n                  deleteTask={this.deleteTask}\r\n                  editTask={this.editTask}\r\n                  countTaskLeft={countTaskLeft}\r\n                  onfilteredList={this.onfilteredList}\r\n                  clearCompleted={this.clearCompleted}\r\n               />\r\n        </section>\r\n    );\r\n}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}