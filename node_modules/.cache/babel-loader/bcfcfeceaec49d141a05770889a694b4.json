{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.js\";\nimport React, { Component } from 'react';\nimport Header from \"../header/header\";\nimport Main from \"../main/main\";\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.maxID = 666;\n    this.state = {\n      listToDo: [this.createNewTask('Completed'), this.createNewTask('Editing'), this.createNewTask('Active')]\n    };\n\n    this.justTest = (id, callback) => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = this.getNewListToDo();\n        const inx = this.getIndex(id);\n        callback(newList, inx);\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.changeStatus = id => {\n      this.justTest(id, ({\n        newList,\n        inx\n      }) => {\n        return newList[inx].className === '' ? newList[inx].className = 'completed' : newList[inx].className = '';\n      });\n    };\n\n    this.deleteTask = id => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = this.getNewListToDo();\n        const inx = this.getIndex(id);\n        newList.splice(inx, 1);\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.editingTask = id => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = this.getNewListToDo();\n        const inx = this.getIndex(id);\n        newList[inx].className = 'editing';\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.editTask = (id, event) => {\n      if (event.keyCode == 13) {\n        this.setState(({\n          listToDo\n        }) => {\n          const val = event.target.value;\n          const newList = this.getNewListToDo();\n          const inx = this.getIndex(id);\n          newList[inx].text = val;\n          newList[inx].className = '';\n          return {\n            listToDo: newList\n          };\n        });\n      }\n    };\n  }\n\n  createNewTask(text) {\n    return {\n      text: text,\n      className: '',\n      id: this.maxID++\n    };\n  } // addElement =()=>{\n  //     this.setState(({listToDo})=>{\n  //         const newArr =  JSON.parse(JSON.stringify(listToDo))\n  //         const newElement = this.createNewTask('random')\n  //         newArr.unshift(newElement)\n  //         return  {\n  //             listToDo: newArr\n  //         }\n  //     })\n  // }\n\n\n  getIndex(id) {\n    return this.state.listToDo.findIndex(el => el.id === id);\n  }\n\n  getNewListToDo() {\n    return JSON.parse(JSON.stringify(this.state.listToDo));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        addElement: this.addElement,\n        changeStatus: this.changeStatus,\n        taskEditing: this.taskEditing,\n        createNewTask: this.createNewTask,\n        taskList: this.state.listToDo,\n        editingTask: this.editingTask,\n        deleteTask: this.deleteTask,\n        editTask: this.editTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this);\n  }\n\n} //\n//\n// taskEditing = (id, task, text)=>{\n//\n//     console.log(id)\n//     this.setState(({listToDo})=>{\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\n//         const inx = listToDo.findIndex((el)=>el.id === id)\n//         if(task === 'del'){\n//             newArr.splice(inx, 1)\n//         }\n//         else if(text) {\n//             newArr[inx].className = 'completed'\n//             newArr[inx].text = text;\n//         }else{\n//             newArr[inx].className = `${task}`\n//         }\n//         return {\n//             listToDo: newArr\n//         }\n//     })\n// }\n//\n// taskEditing = (id, task, val)=>{\n//     this.setState(({listToDo})=>{\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\n//         const inx = listToDo.findIndex((el)=>el.id === id)\n//         if(task === 'del'){\n//             newArr.splice(inx, 1)\n//         }\n//         else if(val) {\n//             newArr[inx].className = 'completed'\n//             newArr[inx].text = val;\n//         }else{\n//             newArr[inx].className = `${task}`\n//         }\n//         return {\n//             listToDo: newArr\n//         }\n//     })\n// }\n// export default App;\n//\n// import React from 'react';\n// import Header from \"../header/header\";\n// import Main from \"../main/main\";\n// import './app.css'\n//\n// const App = () =>{\n//\n//     return (\n//         <section className='todoapp'>\n//             <Header/>\n//             <Main/>\n//         </section>\n//     );\n// }\n//\n// export default App;","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.js"],"names":["React","Component","Header","Main","App","maxID","state","listToDo","createNewTask","justTest","id","callback","setState","newList","getNewListToDo","inx","getIndex","changeStatus","className","deleteTask","splice","editingTask","editTask","event","keyCode","val","target","value","text","findIndex","el","JSON","parse","stringify","render","addElement","taskEditing"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAO,WAAP;AAEA,eAAe,MAAMC,GAAN,SAAkBH,SAAlB,CAA2B;AAAA;AAAA;AAAA,SAEtCI,KAFsC,GAE9B,GAF8B;AAAA,SAGtCC,KAHsC,GAG9B;AACJC,MAAAA,QAAQ,EAAE,CACN,KAAKC,aAAL,CAAmB,WAAnB,CADM,EAEN,KAAKA,aAAL,CAAmB,SAAnB,CAFM,EAGN,KAAKA,aAAL,CAAmB,QAAnB,CAHM;AADN,KAH8B;;AAAA,SAwCtCC,QAxCsC,GAwC3B,CAACC,EAAD,EAAKC,QAAL,KAAgB;AAEvB,WAAKC,QAAL,CAAc,CAAC;AAACL,QAAAA;AAAD,OAAD,KAAc;AACxB,cAAMM,OAAO,GAAG,KAAKC,cAAL,EAAhB;AACA,cAAMC,GAAG,GAAG,KAAKC,QAAL,CAAcN,EAAd,CAAZ;AACAC,QAAAA,QAAQ,CAACE,OAAD,EAAUE,GAAV,CAAR;AACA,eAAO;AACHR,UAAAA,QAAQ,EAAEM;AADP,SAAP;AAGC,OAPL;AAQH,KAlDqC;;AAAA,SAoDtCI,YApDsC,GAoDvBP,EAAD,IAAM;AACjB,WAAKD,QAAL,CAAcC,EAAd,EAAiB,CAAC;AAACG,QAAAA,OAAD;AAAUE,QAAAA;AAAV,OAAD,KAAkB;AAChC,eAAQF,OAAO,CAACE,GAAD,CAAP,CAAaG,SAAb,KAA2B,EAA3B,GAAgCL,OAAO,CAACE,GAAD,CAAP,CAAaG,SAAb,GAAyB,WAAzD,GAAsEL,OAAO,CAACE,GAAD,CAAP,CAAaG,SAAb,GAAyB,EAAvG;AACF,OAFD;AAGF,KAxDqC;;AAAA,SAuEtCC,UAvEsC,GAuEzBT,EAAD,IAAM;AACd,WAAKE,QAAL,CAAc,CAAC;AAACL,QAAAA;AAAD,OAAD,KAAc;AACxB,cAAMM,OAAO,GAAG,KAAKC,cAAL,EAAhB;AACA,cAAMC,GAAG,GAAG,KAAKC,QAAL,CAAcN,EAAd,CAAZ;AACAG,QAAAA,OAAO,CAACO,MAAR,CAAeL,GAAf,EAAoB,CAApB;AACA,eAAO;AACHR,UAAAA,QAAQ,EAAEM;AADP,SAAP;AAGH,OAPD;AAQH,KAhFqC;;AAAA,SAkFtCQ,WAlFsC,GAkFxBX,EAAD,IAAM;AACf,WAAKE,QAAL,CAAc,CAAC;AAACL,QAAAA;AAAD,OAAD,KAAc;AACxB,cAAMM,OAAO,GAAG,KAAKC,cAAL,EAAhB;AACA,cAAMC,GAAG,GAAG,KAAKC,QAAL,CAAcN,EAAd,CAAZ;AACDG,QAAAA,OAAO,CAACE,GAAD,CAAP,CAAaG,SAAb,GAAyB,SAAzB;AAEC,eAAO;AACHX,UAAAA,QAAQ,EAAEM;AADP,SAAP;AAGH,OARD;AASH,KA5FqC;;AAAA,SA8FtCS,QA9FsC,GA8F5B,CAACZ,EAAD,EAAIa,KAAJ,KAAY;AAGlB,UAAGA,KAAK,CAACC,OAAN,IAAiB,EAApB,EAAuB;AACtB,aAAKZ,QAAL,CAAc,CAAC;AAACL,UAAAA;AAAD,SAAD,KAAc;AACxB,gBAAMkB,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAaC,KAAzB;AACA,gBAAMd,OAAO,GAAG,KAAKC,cAAL,EAAhB;AACA,gBAAMC,GAAG,GAAG,KAAKC,QAAL,CAAcN,EAAd,CAAZ;AACAG,UAAAA,OAAO,CAACE,GAAD,CAAP,CAAaa,IAAb,GAAoBH,GAApB;AACAZ,UAAAA,OAAO,CAACE,GAAD,CAAP,CAAaG,SAAb,GAAyB,EAAzB;AACA,iBAAO;AACHX,YAAAA,QAAQ,EAAEM;AADP,WAAP;AAGA,SATJ;AAUA;AAEJ,KA9GqC;AAAA;;AAWtCL,EAAAA,aAAa,CAAEoB,IAAF,EAAO;AAChB,WAAO;AACHA,MAAAA,IAAI,EAAEA,IADH;AAEHV,MAAAA,SAAS,EAAE,EAFR;AAGHR,MAAAA,EAAE,EAAG,KAAKL,KAAL;AAHF,KAAP;AAKH,GAjBqC,CAoBtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAW,EAAAA,QAAQ,CAAEN,EAAF,EAAK;AACN,WAAO,KAAKJ,KAAL,CAAWC,QAAX,CAAoBsB,SAApB,CAA+BC,EAAD,IAAMA,EAAE,CAACpB,EAAH,KAAUA,EAA9C,CAAP;AACN;;AAEDI,EAAAA,cAAc,GAAG;AACb,WAAOiB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAK3B,KAAL,CAAWC,QAA1B,CAAX,CAAP;AACH;;AA6ED2B,EAAAA,MAAM,GAAG;AACT,wBACI;AAAS,MAAA,SAAS,EAAC,SAAnB;AAAA,8BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD;AAAM,QAAA,UAAU,EAAE,KAAKC,UAAvB;AACM,QAAA,YAAY,EAAE,KAAKlB,YADzB;AAEM,QAAA,WAAW,EAAE,KAAKmB,WAFxB;AAGM,QAAA,aAAa,EAAE,KAAK5B,aAH1B;AAIM,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWC,QAJ3B;AAKM,QAAA,WAAW,EAAE,KAAKc,WALxB;AAMM,QAAA,UAAU,EAAE,KAAKF,UANvB;AAOM,QAAA,QAAQ,EAAE,KAAKG;AAPrB;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AAhIyC,C,CA2I1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {Component} from 'react';\r\nimport Header from \"../header/header\";\r\nimport Main from \"../main/main\";\r\nimport './app.css'\r\n\r\nexport default class App extends Component{\r\n\r\n    maxID = 666;\r\n    state = {\r\n        listToDo: [\r\n            this.createNewTask('Completed'),\r\n            this.createNewTask('Editing'),\r\n            this.createNewTask('Active'),\r\n        ]\r\n    }\r\n\r\n    createNewTask (text){\r\n        return {\r\n            text: text,\r\n            className: '',\r\n            id:  this.maxID++\r\n        }\r\n    }\r\n\r\n\r\n    // addElement =()=>{\r\n    //     this.setState(({listToDo})=>{\r\n    //         const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n    //         const newElement = this.createNewTask('random')\r\n    //         newArr.unshift(newElement)\r\n    //         return  {\r\n    //             listToDo: newArr\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    getIndex (id){\r\n           return this.state.listToDo.findIndex((el)=>el.id === id)\r\n    }\r\n\r\n    getNewListToDo (){\r\n        return JSON.parse(JSON.stringify(this.state.listToDo))\r\n    }\r\n\r\n\r\n    justTest = (id, callback)=>{\r\n\r\n        this.setState(({listToDo})=>{\r\n            const newList = this.getNewListToDo();\r\n            const inx = this.getIndex(id)\r\n            callback(newList, inx)\r\n            return {\r\n                listToDo: newList\r\n            }\r\n            })\r\n    }\r\n\r\n    changeStatus= (id)=>{\r\n       this.justTest(id,({newList, inx})=>{\r\n          return  newList[inx].className === ''?  newList[inx].className = 'completed': newList[inx].className = '';\r\n       })\r\n    }\r\n\r\n\r\n    // changeStatus= (id)=>{\r\n    //     this.setState(({listToDo})=>{\r\n    //         const newList = this.getNewListToDo();\r\n    //         const inx = this.getIndex(id)\r\n    //\r\n    //         newList[inx].className === ''?  newList[inx].className = 'completed': newList[inx].className = '';\r\n    //         return {\r\n    //             listToDo: newList\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    deleteTask =(id)=>{\r\n        this.setState(({listToDo})=>{\r\n            const newList = this.getNewListToDo();\r\n            const inx = this.getIndex(id)\r\n            newList.splice(inx, 1)\r\n            return {\r\n                listToDo: newList\r\n            }\r\n        })\r\n    }\r\n\r\n    editingTask= (id)=>{\r\n        this.setState(({listToDo})=>{\r\n            const newList = this.getNewListToDo();\r\n            const inx = this.getIndex(id)\r\n           newList[inx].className = 'editing';\r\n\r\n            return {\r\n                listToDo: newList\r\n            }\r\n        })\r\n    }\r\n\r\n    editTask =(id,event)=>{\r\n\r\n\r\n        if(event.keyCode == 13){\r\n         this.setState(({listToDo})=>{\r\n             const val = event.target.value\r\n             const newList = this.getNewListToDo();\r\n             const inx = this.getIndex(id)\r\n             newList[inx].text = val\r\n             newList[inx].className = '';\r\n             return {\r\n                 listToDo: newList\r\n             }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n    return (\r\n        <section className='todoapp'>\r\n            <Header/>\r\n            <Main addElement={this.addElement}\r\n                  changeStatus={this.changeStatus}\r\n                  taskEditing={this.taskEditing}\r\n                  createNewTask={this.createNewTask}\r\n                  taskList={this.state.listToDo}\r\n                  editingTask={this.editingTask}\r\n                  deleteTask={this.deleteTask}\r\n                  editTask={this.editTask}/>\r\n        </section>\r\n    );\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//\r\n//\r\n// taskEditing = (id, task, text)=>{\r\n//\r\n//     console.log(id)\r\n//     this.setState(({listToDo})=>{\r\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n//         const inx = listToDo.findIndex((el)=>el.id === id)\r\n//         if(task === 'del'){\r\n//             newArr.splice(inx, 1)\r\n//         }\r\n//         else if(text) {\r\n//             newArr[inx].className = 'completed'\r\n//             newArr[inx].text = text;\r\n//         }else{\r\n//             newArr[inx].className = `${task}`\r\n//         }\r\n//         return {\r\n//             listToDo: newArr\r\n//         }\r\n//     })\r\n// }\r\n\r\n//\r\n// taskEditing = (id, task, val)=>{\r\n//     this.setState(({listToDo})=>{\r\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n//         const inx = listToDo.findIndex((el)=>el.id === id)\r\n//         if(task === 'del'){\r\n//             newArr.splice(inx, 1)\r\n//         }\r\n//         else if(val) {\r\n//             newArr[inx].className = 'completed'\r\n//             newArr[inx].text = val;\r\n//         }else{\r\n//             newArr[inx].className = `${task}`\r\n//         }\r\n//         return {\r\n//             listToDo: newArr\r\n//         }\r\n//     })\r\n// }\r\n\r\n// export default App;\r\n\r\n//\r\n// import React from 'react';\r\n// import Header from \"../header/header\";\r\n// import Main from \"../main/main\";\r\n// import './app.css'\r\n//\r\n// const App = () =>{\r\n//\r\n//     return (\r\n//         <section className='todoapp'>\r\n//             <Header/>\r\n//             <Main/>\r\n//         </section>\r\n//     );\r\n// }\r\n//\r\n// export default App;\r\n"]},"metadata":{},"sourceType":"module"}