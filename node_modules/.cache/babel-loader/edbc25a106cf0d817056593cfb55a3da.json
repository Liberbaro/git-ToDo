{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.js\";\nimport React, { Component } from 'react';\nimport Header from \"../header/header\";\nimport Main from \"../main/main\";\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.maxID = 666;\n    this.state = {\n      listToDo: [this.createNewTask('Completed'), this.createNewTask('Editing'), this.createNewTask('Active')]\n    };\n\n    this.changeStatus = id => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = this.cloneToDo();\n        const inx = this.getIdx(id);\n        newList[inx].className === '' ? newList[inx].className = 'completed' : newList[inx].className = '';\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.deleteTask = id => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = this.cloneToDo();\n        const inx = this.getIdx(id);\n        newList.splice(inx, 1);\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.editingTask = id => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = this.cloneToDo();\n        const inx = this.getIdx(id);\n        newList[inx].className = 'editing';\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.editTask = (id, event) => {\n      console.log(event.target.value);\n      const val = event.target.value;\n      const newList = this.cloneToDo();\n      const inx = this.getIdx(id);\n      newList[inx].text = val;\n\n      if (event.keyCode == 13) {\n        this.setState(({\n          listToDo\n        }) => {\n          return {\n            listToDo: newList\n          };\n        });\n      }\n    };\n\n    this.taskEditing = (id, task, text) => {\n      console.log(id); // this.setState(({listToDo})=>{\n      //     const newArr =  JSON.parse(JSON.stringify(listToDo))\n      //     const inx = listToDo.findIndex((el)=>el.id === id)\n      //     if(task === 'del'){\n      //         newArr.splice(inx, 1)\n      //     }\n      //     else if(text) {\n      //         newArr[inx].className = 'completed'\n      //         newArr[inx].text = text;\n      //     }else{\n      //         newArr[inx].className = `${task}`\n      //     }\n      //     return {\n      //         listToDo: newArr\n      //     }\n      // })\n    };\n  }\n\n  createNewTask(text) {\n    return {\n      text: text,\n      className: '',\n      id: this.maxID++\n    };\n  } // addElement =()=>{\n  //     this.setState(({listToDo})=>{\n  //         const newArr =  JSON.parse(JSON.stringify(listToDo))\n  //         const newElement = this.createNewTask('random')\n  //         newArr.unshift(newElement)\n  //         return  {\n  //             listToDo: newArr\n  //         }\n  //     })\n  // }\n\n\n  getIdx(id) {\n    const inx = this.state.listToDo.findIndex(el => el.id === id);\n    return inx;\n  }\n\n  cloneToDo() {\n    return JSON.parse(JSON.stringify(this.state.listToDo));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        addElement: this.addElement,\n        changeStatus: this.changeStatus,\n        taskEditing: this.taskEditing,\n        createNewTask: this.createNewTask,\n        taskList: this.state.listToDo,\n        editingTask: this.editingTask,\n        deleteTask: this.deleteTask,\n        editTask: this.editTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this);\n  }\n\n} //\n// taskEditing = (id, task, val)=>{\n//     this.setState(({listToDo})=>{\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\n//         const inx = listToDo.findIndex((el)=>el.id === id)\n//         if(task === 'del'){\n//             newArr.splice(inx, 1)\n//         }\n//         else if(val) {\n//             newArr[inx].className = 'completed'\n//             newArr[inx].text = val;\n//         }else{\n//             newArr[inx].className = `${task}`\n//         }\n//         return {\n//             listToDo: newArr\n//         }\n//     })\n// }\n// export default App;\n//\n// import React from 'react';\n// import Header from \"../header/header\";\n// import Main from \"../main/main\";\n// import './app.css'\n//\n// const App = () =>{\n//\n//     return (\n//         <section className='todoapp'>\n//             <Header/>\n//             <Main/>\n//         </section>\n//     );\n// }\n//\n// export default App;","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.js"],"names":["React","Component","Header","Main","App","maxID","state","listToDo","createNewTask","changeStatus","id","setState","newList","cloneToDo","inx","getIdx","className","deleteTask","splice","editingTask","editTask","event","console","log","target","value","val","text","keyCode","taskEditing","task","findIndex","el","JSON","parse","stringify","render","addElement"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Header from \"../header/header\";\r\nimport Main from \"../main/main\";\r\nimport './app.css'\r\n\r\nexport default class App extends Component{\r\n\r\n    maxID = 666;\r\n    state = {\r\n        listToDo: [\r\n            this.createNewTask('Completed'),\r\n            this.createNewTask('Editing'),\r\n            this.createNewTask('Active'),\r\n        ]\r\n    }\r\n\r\n    createNewTask (text){\r\n        return {\r\n            text: text,\r\n            className: '',\r\n            id:  this.maxID++\r\n        }\r\n    }\r\n\r\n\r\n    // addElement =()=>{\r\n    //     this.setState(({listToDo})=>{\r\n    //         const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n    //         const newElement = this.createNewTask('random')\r\n    //         newArr.unshift(newElement)\r\n    //         return  {\r\n    //             listToDo: newArr\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    getIdx (id){\r\n            const inx = this.state.listToDo.findIndex((el)=>el.id === id)\r\n            return inx;\r\n    }\r\n\r\n    cloneToDo (){\r\n        return JSON.parse(JSON.stringify(this.state.listToDo))\r\n    }\r\n\r\n\r\n    changeStatus= (id)=>{\r\n        this.setState(({listToDo})=>{\r\n            const newList = this.cloneToDo();\r\n            const inx = this.getIdx(id)\r\n            newList[inx].className === ''?  newList[inx].className = 'completed': newList[inx].className = '';\r\n            return {\r\n                listToDo: newList\r\n            }\r\n        })\r\n    }\r\n\r\n    deleteTask =(id)=>{\r\n        this.setState(({listToDo})=>{\r\n            const newList = this.cloneToDo();\r\n            const inx = this.getIdx(id)\r\n            newList.splice(inx, 1)\r\n            return {\r\n                listToDo: newList\r\n            }\r\n        })\r\n    }\r\n\r\n    editingTask= (id)=>{\r\n        this.setState(({listToDo})=>{\r\n            const newList = this.cloneToDo();\r\n            const inx = this.getIdx(id)\r\n           newList[inx].className = 'editing';\r\n\r\n            return {\r\n                listToDo: newList\r\n            }\r\n        })\r\n    }\r\n\r\n    editTask =(id,event)=>{\r\n        console.log(event.target.value)\r\n        const val = event.target.value\r\n        const newList = this.cloneToDo();\r\n        const inx = this.getIdx(id)\r\n        newList[inx].text = val\r\n        if(event.keyCode == 13){\r\n         this.setState(({listToDo})=>{\r\n             return {\r\n                 listToDo: newList\r\n             }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    taskEditing = (id, task, text)=>{\r\n\r\n        console.log(id)\r\n        // this.setState(({listToDo})=>{\r\n        //     const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n        //     const inx = listToDo.findIndex((el)=>el.id === id)\r\n        //     if(task === 'del'){\r\n        //         newArr.splice(inx, 1)\r\n        //     }\r\n        //     else if(text) {\r\n        //         newArr[inx].className = 'completed'\r\n        //         newArr[inx].text = text;\r\n        //     }else{\r\n        //         newArr[inx].className = `${task}`\r\n        //     }\r\n        //     return {\r\n        //         listToDo: newArr\r\n        //     }\r\n        // })\r\n    }\r\n\r\n\r\n    render() {\r\n    return (\r\n        <section className='todoapp'>\r\n            <Header/>\r\n            <Main addElement={this.addElement}\r\n                  changeStatus={this.changeStatus}\r\n                  taskEditing={this.taskEditing}\r\n                  createNewTask={this.createNewTask}\r\n                  taskList={this.state.listToDo}\r\n                  editingTask={this.editingTask}\r\n                  deleteTask={this.deleteTask}\r\n                  editTask={this.editTask}/>\r\n        </section>\r\n    );\r\n}\r\n\r\n}\r\n//\r\n// taskEditing = (id, task, val)=>{\r\n//     this.setState(({listToDo})=>{\r\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n//         const inx = listToDo.findIndex((el)=>el.id === id)\r\n//         if(task === 'del'){\r\n//             newArr.splice(inx, 1)\r\n//         }\r\n//         else if(val) {\r\n//             newArr[inx].className = 'completed'\r\n//             newArr[inx].text = val;\r\n//         }else{\r\n//             newArr[inx].className = `${task}`\r\n//         }\r\n//         return {\r\n//             listToDo: newArr\r\n//         }\r\n//     })\r\n// }\r\n\r\n// export default App;\r\n\r\n//\r\n// import React from 'react';\r\n// import Header from \"../header/header\";\r\n// import Main from \"../main/main\";\r\n// import './app.css'\r\n//\r\n// const App = () =>{\r\n//\r\n//     return (\r\n//         <section className='todoapp'>\r\n//             <Header/>\r\n//             <Main/>\r\n//         </section>\r\n//     );\r\n// }\r\n//\r\n// export default App;\r\n"]},"metadata":{},"sourceType":"module"}