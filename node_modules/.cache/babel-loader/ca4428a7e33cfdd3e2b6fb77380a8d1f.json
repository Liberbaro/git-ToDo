{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.jsx\";\nimport React, { Component } from \"react\";\nimport Header from \"../header/header\";\nimport Main from \"../main/main\";\nimport \"./app.css\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.taskId = 100;\n    this.state = {\n      listToDo: []\n    };\n\n    this.getTaskFromListToDo = (id, listToDo) => {\n      const index = this.getTaskIndex(id);\n      return listToDo[index];\n    };\n\n    this.changeListToDo = (id, cb) => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newListToDo = this.getNewListToDo(),\n              index = this.getTaskIndex(id),\n              task = this.getTaskFromListToDo(id, newListToDo);\n        cb(newListToDo, index, task);\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n\n    this.removeTaskFromToDoList = id => {\n      this.changeListToDo(id, (newListToDo, index) => newListToDo.splice(index, 1));\n    };\n\n    this.changeTaskStatus = id => {\n      this.changeListToDo(id, (arg1, arg2, task) => {\n        task.className = task.done ? \"\" : \"completed\";\n        task.done = !task.done;\n      });\n    };\n\n    this.editTaskValue = id => {\n      this.changeListToDo(id, (arg1, arg2, task) => {\n        task.className = \"editing\";\n      });\n    };\n\n    this.saveNewTaskValue = (id, e) => {\n      this.changeListToDo(id, (arg, arg2, task) => {\n        task.text = e.target.value;\n        task.className = task.done ? \"completed\" : \"\";\n      });\n    };\n\n    this.selectTaskFilter = label => {\n      this.changeListToDo(100, newListToDo => {\n        newListToDo.map(el => {\n          if (label === \"all\") el.display = \"block\";else el.display = el.className === label ? \"block\" : \"none\";\n          return el;\n        });\n      });\n    };\n\n    this.clearCompletedTasks = () => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newListToDo = listToDo.filter(({\n          className\n        }) => className !== \"completed\");\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n\n    this.addTaskToListToDo = text => {\n      this.changeListToDo(100, newListToDo => {\n        const newTask = this.createNewTask(text);\n        newListToDo.unshift(newTask);\n      });\n    };\n  }\n\n  createNewTask(text) {\n    return {\n      text: text,\n      className: \"\",\n      id: this.taskId++,\n      done: false,\n      display: \"block\",\n      timeOfCreate: new Date().getTime() // на Date пробрасывает ошибку при добавлении новый экземпляров.\n\n    };\n  }\n\n  getTaskIndex(id) {\n    return this.state.listToDo.findIndex(el => el.id === id);\n  }\n\n  getNewListToDo() {\n    return JSON.parse(JSON.stringify(this.state.listToDo));\n  }\n\n  render() {\n    const {\n      listToDo\n    } = this.state;\n    const countTasksLeft = listToDo.filter(({\n      done\n    }) => !done).length;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        addTaskToListToDo: this.addTaskToListToDo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        taskList: listToDo,\n        countTasksLeft: countTasksLeft,\n        clearCompletedTasks: this.clearCompletedTasks,\n        selectTaskFilter: this.selectTaskFilter,\n        saveEditingTask: this.saveNewTaskValue,\n        changeTaskStatus: this.changeTaskStatus,\n        editTaskValue: this.editTaskValue,\n        deleteTask: this.removeTaskFromToDoList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.jsx"],"names":["React","Component","Header","Main","App","taskId","state","listToDo","getTaskFromListToDo","id","index","getTaskIndex","changeListToDo","cb","setState","newListToDo","getNewListToDo","task","removeTaskFromToDoList","splice","changeTaskStatus","arg1","arg2","className","done","editTaskValue","saveNewTaskValue","e","arg","text","target","value","selectTaskFilter","label","map","el","display","clearCompletedTasks","filter","addTaskToListToDo","newTask","createNewTask","unshift","timeOfCreate","Date","getTime","findIndex","JSON","parse","stringify","render","countTasksLeft","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"../header/header\";\nimport Main from \"../main/main\";\nimport \"./app.css\";\n\nexport default class App extends Component {\n  taskId = 100; // Ошибка. Разобраться.\n\n  // eslint-disable-next-line react/state-in-constructor\n  state = { listToDo: [] };\n\n  createNewTask(text) {\n    return {\n      text: text,\n      className: \"\",\n      id: this.taskId++,\n      done: false,\n      display: \"block\",\n      timeOfCreate: new Date().getTime(), // на Date пробрасывает ошибку при добавлении новый экземпляров.\n    };\n  }\n\n  getTaskIndex(id) {\n    return this.state.listToDo.findIndex((el) => el.id === id);\n  }\n\n  getNewListToDo() {\n    return JSON.parse(JSON.stringify(this.state.listToDo));\n  }\n\n  getTaskFromListToDo = (id, listToDo) => {\n    const index = this.getTaskIndex(id);\n    return listToDo[index];\n  };\n\n  changeListToDo = (id, cb) => {\n    this.setState(({ listToDo }) => {\n      const newListToDo = this.getNewListToDo(),\n        index = this.getTaskIndex(id),\n        task = this.getTaskFromListToDo(id, newListToDo);\n      cb(newListToDo, index, task);\n      return {\n        listToDo: newListToDo,\n      };\n    });\n  };\n\n  removeTaskFromToDoList = (id) => {\n    this.changeListToDo(id, (newListToDo, index) =>\n      newListToDo.splice(index, 1)\n    );\n  };\n\n  changeTaskStatus = (id) => {\n    this.changeListToDo(id, (arg1, arg2, task) => {\n      task.className = task.done ? \"\" : \"completed\";\n      task.done = !task.done;\n    });\n  };\n\n  editTaskValue = (id) => {\n    this.changeListToDo(id, (arg1, arg2, task) => {\n      task.className = \"editing\";\n    });\n  };\n\n  saveNewTaskValue = (id, e) => {\n    this.changeListToDo(id, (arg, arg2, task) => {\n      task.text = e.target.value;\n      task.className = task.done ? \"completed\" : \"\";\n    });\n  };\n\n  selectTaskFilter = (label) => {\n    this.changeListToDo(100, (newListToDo) => {\n      newListToDo.map((el) => {\n        if (label === \"all\") el.display = \"block\";\n        else el.display = el.className === label ? \"block\" : \"none\";\n        return el;\n      });\n    });\n  };\n\n  clearCompletedTasks = () => {\n    this.setState(({ listToDo }) => {\n      const newListToDo = listToDo.filter(\n        ({ className }) => className !== \"completed\"\n      );\n      return { listToDo: newListToDo };\n    });\n  };\n\n  addTaskToListToDo = (text) => {\n    this.changeListToDo(100, (newListToDo) => {\n      const newTask = this.createNewTask(text);\n      newListToDo.unshift(newTask);\n    });\n  };\n\n  render() {\n    const { listToDo } = this.state;\n    const countTasksLeft = listToDo.filter(({ done }) => !done).length;\n    return (\n      <section className=\"todoapp\">\n        <Header addTaskToListToDo={this.addTaskToListToDo} />\n        <Main\n          taskList={listToDo}\n          countTasksLeft={countTasksLeft}\n          clearCompletedTasks={this.clearCompletedTasks}\n          selectTaskFilter={this.selectTaskFilter}\n          saveEditingTask={this.saveNewTaskValue}\n          changeTaskStatus={this.changeTaskStatus}\n          editTaskValue={this.editTaskValue}\n          deleteTask={this.removeTaskFromToDoList}\n        />\n      </section>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}