{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\task-toogle\\\\task-toggle.js\";\nimport React, { Component } from 'react';\nimport './task-toggle.css';\nimport TaskList from \"../task-list/task-list\";\nexport default class TaskToggle extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      competed: false\n    };\n\n    this.onCompleted = () => {\n      const {\n        id,\n        testFun,\n        value\n      } = this.props;\n\n      if (value) {\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          onClick: this.onCompleted,\n          value: \"\\u0445\\u0443\\u0439\",\n          type: type,\n          className: className\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 17\n        }, this);\n      } else {\n        if (this.props.mainClass === 'completed') {\n          this.setState(({\n            completed\n          }) => {\n            return {\n              completed: true\n            };\n          });\n          return testFun(id, '');\n        } else {\n          this.setState(({\n            completed\n          }) => {\n            return {\n              completed: false\n            };\n          });\n          return testFun(id, 'completed');\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      className,\n      type\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      onClick: this.onCompleted,\n      type: type,\n      className: className\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/project/react/todo/src/components/task-toogle/task-toggle.js"],"names":["React","Component","TaskList","TaskToggle","state","competed","onCompleted","id","testFun","value","props","type","className","mainClass","setState","completed","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,mBAAP;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAGA,eAAe,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAE9CG,KAF8C,GAEtC;AACJC,MAAAA,QAAQ,EAAE;AADN,KAFsC;;AAAA,SAM9CC,WAN8C,GAMhC,MAAI;AACd,YAAM;AAACC,QAAAA,EAAD;AAAIC,QAAAA,OAAJ;AAAaC,QAAAA;AAAb,UAAsB,KAAKC,KAAjC;;AACA,UAAGD,KAAH,EAAS;AACL,4BACI;AAAO,UAAA,OAAO,EAAE,KAAKH,WAArB;AAAkC,UAAA,KAAK,EAAC,oBAAxC;AAA8C,UAAA,IAAI,EAAEK,IAApD;AAA0D,UAAA,SAAS,EAAEC;AAArE;AAAA;AAAA;AAAA;AAAA,gBADJ;AAGH,OAJD,MAIO;AACH,YAAG,KAAKF,KAAL,CAAWG,SAAX,KAAyB,WAA5B,EAAwC;AACpC,eAAKC,QAAL,CAAc,CAAC;AAACC,YAAAA;AAAD,WAAD,KAAgB;AAC1B,mBAAQ;AACJA,cAAAA,SAAS,EAAE;AADP,aAAR;AAGH,WAJD;AAKA,iBAAQP,OAAO,CAACD,EAAD,EAAK,EAAL,CAAf;AACH,SAPD,MAOO;AACH,eAAKO,QAAL,CAAc,CAAC;AAACC,YAAAA;AAAD,WAAD,KAAgB;AAC1B,mBAAQ;AACJA,cAAAA,SAAS,EAAE;AADP,aAAR;AAGH,WAJD;AAKA,iBAAQP,OAAO,CAACD,EAAD,EAAK,WAAL,CAAf;AACH;AACJ;AACA,KA7ByC;AAAA;;AAkC9CS,EAAAA,MAAM,GAAG;AACL,UAAM;AAACJ,MAAAA,SAAD;AAAYD,MAAAA;AAAZ,QAAoB,KAAKD,KAA/B;AACA,wBACI;AAAO,MAAA,OAAO,EAAE,KAAKJ,WAArB;AAAmC,MAAA,IAAI,EAAEK,IAAzC;AAA+C,MAAA,SAAS,EAAEC;AAA1D;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAvC6C","sourcesContent":["import React, {Component} from 'react'\r\nimport './task-toggle.css'\r\nimport TaskList from \"../task-list/task-list\";\r\n\r\n\r\nexport default class TaskToggle extends Component {\r\n\r\n    state = {\r\n        competed: false\r\n    }\r\n\r\n    onCompleted = ()=>{\r\n        const {id,testFun, value} = this.props;\r\n        if(value){\r\n            return (\r\n                <input onClick={this.onCompleted} value='хуй' type={type} className={className}/>\r\n            );\r\n        } else {\r\n            if(this.props.mainClass === 'completed'){\r\n                this.setState(({completed})=> {\r\n                    return  {\r\n                        completed: true\r\n                    }\r\n                })\r\n                return  testFun(id, '')\r\n            } else {\r\n                this.setState(({completed})=> {\r\n                    return  {\r\n                        completed: false\r\n                    }\r\n                })\r\n                return  testFun(id, 'completed')\r\n            }\r\n        }\r\n        }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const {className, type} = this.props\r\n        return (\r\n            <input onClick={this.onCompleted}  type={type} className={className}/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}