{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.jsx\";\nimport React, { Component } from 'react';\nimport Header from '../header/header';\nimport Main from '../main/main';\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.taskId = 100;\n    this.state = {\n      listToDo: []\n    };\n\n    this.addTaskToListToDo = text => {\n      console.log(text); // this.changeListToDo(100, (newListToDo) => {\n      //   const newTask = this.createNewTask(text);\n      //   newListToDo.unshift(newTask);\n      // });\n    };\n\n    this.clearCompletedTasks = () => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newListToDo = listToDo.filter(({\n          className\n        }) => className !== 'completed');\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n\n    this.editTaskValue = id => {\n      this.changeListToDo(id, (arg1, arg2, task) => {\n        task.className = 'editing';\n      });\n    };\n\n    this.saveNewTaskValue = (id, e) => {\n      this.changeListToDo(id, (arg, arg2, task) => {\n        task.text = e.target.value;\n        task.className = task.done ? 'completed' : '';\n      });\n    };\n\n    this.changeTaskStatus = id => {\n      this.changeListToDo(id, (arg1, arg2, task) => {\n        task.className = task.done ? '' : 'completed';\n        task.done = !task.done;\n      });\n    };\n\n    this.removeTaskFromToDoList = id => {\n      this.changeListToDo(id, (newListToDo, index) => newListToDo.splice(index, 1));\n    };\n\n    this.getTaskFromListToDo = (id, listToDo) => {\n      const index = this.getTaskIndex(id);\n      return listToDo[index];\n    };\n\n    this.selectTaskFilter = label => {\n      this.changeListToDo(100, newListToDo => {\n        newListToDo.map(el => {\n          if (label === 'all') el.display = 'block';else el.display = el.className === label ? 'block' : 'none';\n          return el;\n        });\n      });\n    };\n\n    this.changeListToDo = (id, cb) => {\n      this.setState(() => {\n        const newListToDo = this.getNewListToDo(),\n              index = this.getTaskIndex(id),\n              task = this.getTaskFromListToDo(id, newListToDo);\n        cb(newListToDo, index, task);\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n  }\n\n  getNewListToDo() {\n    const {\n      listToDo\n    } = this.state;\n    return JSON.parse(JSON.stringify(listToDo));\n  }\n\n  getTaskIndex(id) {\n    const {\n      listToDo\n    } = this.state;\n    return listToDo.findIndex(el => el.id === id);\n  }\n\n  createNewTask(text) {\n    return {\n      text,\n      className: '',\n      id: this.taskId++,\n      done: false,\n      display: 'block',\n      timeOfCreate: new Date().getTime()\n    };\n  }\n\n  render() {\n    const {\n      listToDo\n    } = this.state,\n          countTasksLeft = listToDo.filter(({\n      done\n    }) => !done).length;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        addTaskToListToDo: this.addTaskToListToDo,\n        asdas: \"aa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        taskList: listToDo,\n        countTasksLeft: countTasksLeft,\n        clearCompletedTasks: this.clearCompletedTasks,\n        selectTaskFilter: this.selectTaskFilter,\n        saveNewTaskValue: this.saveNewTaskValue,\n        changeTaskStatus: this.changeTaskStatus,\n        editTaskValue: this.editTaskValue,\n        deleteTask: this.removeTaskFromToDoList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.jsx"],"names":["React","Component","Header","Main","App","taskId","state","listToDo","addTaskToListToDo","text","console","log","clearCompletedTasks","setState","newListToDo","filter","className","editTaskValue","id","changeListToDo","arg1","arg2","task","saveNewTaskValue","e","arg","target","value","done","changeTaskStatus","removeTaskFromToDoList","index","splice","getTaskFromListToDo","getTaskIndex","selectTaskFilter","label","map","el","display","cb","getNewListToDo","JSON","parse","stringify","findIndex","createNewTask","timeOfCreate","Date","getTime","render","countTasksLeft","length"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAO,WAAP;AAEA,eAAe,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACzCI,MADyC,GAChC,GADgC;AAAA,SAGzCC,KAHyC,GAGjC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAHiC;;AAAA,SAezCC,iBAfyC,GAepBC,IAAD,IAAU;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAD4B,CAE5B;AACA;AACA;AACA;AACD,KArBwC;;AAAA,SAuBzCG,mBAvByC,GAuBnB,MAAM;AAC1B,WAAKC,QAAL,CAAc,CAAC;AAAEN,QAAAA;AAAF,OAAD,KAAkB;AAC9B,cAAMO,WAAW,GAAGP,QAAQ,CAACQ,MAAT,CAClB,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAmBA,SAAS,KAAK,WADf,CAApB;AAGA,eAAO;AAAET,UAAAA,QAAQ,EAAEO;AAAZ,SAAP;AACD,OALD;AAMD,KA9BwC;;AAAA,SAgCzCG,aAhCyC,GAgCxBC,EAAD,IAAQ;AACtB,WAAKC,cAAL,CAAoBD,EAApB,EAAwB,CAACE,IAAD,EAAOC,IAAP,EAAaC,IAAb,KAAsB;AAC5CA,QAAAA,IAAI,CAACN,SAAL,GAAiB,SAAjB;AACD,OAFD;AAGD,KApCwC;;AAAA,SAsCzCO,gBAtCyC,GAsCtB,CAACL,EAAD,EAAKM,CAAL,KAAW;AAC5B,WAAKL,cAAL,CAAoBD,EAApB,EAAwB,CAACO,GAAD,EAAMJ,IAAN,EAAYC,IAAZ,KAAqB;AAC3CA,QAAAA,IAAI,CAACb,IAAL,GAAYe,CAAC,CAACE,MAAF,CAASC,KAArB;AACAL,QAAAA,IAAI,CAACN,SAAL,GAAiBM,IAAI,CAACM,IAAL,GAAY,WAAZ,GAA0B,EAA3C;AACD,OAHD;AAID,KA3CwC;;AAAA,SA6CzCC,gBA7CyC,GA6CrBX,EAAD,IAAQ;AACzB,WAAKC,cAAL,CAAoBD,EAApB,EAAwB,CAACE,IAAD,EAAOC,IAAP,EAAaC,IAAb,KAAsB;AAC5CA,QAAAA,IAAI,CAACN,SAAL,GAAiBM,IAAI,CAACM,IAAL,GAAY,EAAZ,GAAiB,WAAlC;AACAN,QAAAA,IAAI,CAACM,IAAL,GAAY,CAACN,IAAI,CAACM,IAAlB;AACD,OAHD;AAID,KAlDwC;;AAAA,SAoDzCE,sBApDyC,GAoDfZ,EAAD,IAAQ;AAC/B,WAAKC,cAAL,CAAoBD,EAApB,EAAwB,CAACJ,WAAD,EAAciB,KAAd,KAAwBjB,WAAW,CAACkB,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B,CAAhD;AACD,KAtDwC;;AAAA,SAwDzCE,mBAxDyC,GAwDnB,CAACf,EAAD,EAAKX,QAAL,KAAkB;AACtC,YAAMwB,KAAK,GAAG,KAAKG,YAAL,CAAkBhB,EAAlB,CAAd;AACA,aAAOX,QAAQ,CAACwB,KAAD,CAAf;AACD,KA3DwC;;AAAA,SA6DzCI,gBA7DyC,GA6DrBC,KAAD,IAAW;AAC5B,WAAKjB,cAAL,CAAoB,GAApB,EAA0BL,WAAD,IAAiB;AACxCA,QAAAA,WAAW,CAACuB,GAAZ,CAAiBC,EAAD,IAAQ;AACtB,cAAIF,KAAK,KAAK,KAAd,EAAqBE,EAAE,CAACC,OAAH,GAAa,OAAb,CAArB,KACKD,EAAE,CAACC,OAAH,GAAaD,EAAE,CAACtB,SAAH,KAAiBoB,KAAjB,GAAyB,OAAzB,GAAmC,MAAhD;AACL,iBAAOE,EAAP;AACD,SAJD;AAKD,OAND;AAOD,KArEwC;;AAAA,SAuEzCnB,cAvEyC,GAuExB,CAACD,EAAD,EAAKsB,EAAL,KAAY;AAC3B,WAAK3B,QAAL,CAAc,MAAM;AAClB,cAAMC,WAAW,GAAG,KAAK2B,cAAL,EAApB;AAAA,cACMV,KAAK,GAAG,KAAKG,YAAL,CAAkBhB,EAAlB,CADd;AAAA,cAEMI,IAAI,GAAG,KAAKW,mBAAL,CAAyBf,EAAzB,EAA6BJ,WAA7B,CAFb;AAGA0B,QAAAA,EAAE,CAAC1B,WAAD,EAAciB,KAAd,EAAqBT,IAArB,CAAF;AACA,eAAO;AAAEf,UAAAA,QAAQ,EAAEO;AAAZ,SAAP;AACD,OAND;AAOD,KA/EwC;AAAA;;AAKzC2B,EAAAA,cAAc,GAAG;AACf,UAAM;AAAElC,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,WAAOoC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAerC,QAAf,CAAX,CAAP;AACD;;AAED2B,EAAAA,YAAY,CAAChB,EAAD,EAAK;AACf,UAAM;AAAEX,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,WAAOC,QAAQ,CAACsC,SAAT,CAAoBP,EAAD,IAAQA,EAAE,CAACpB,EAAH,KAAUA,EAArC,CAAP;AACD;;AAoED4B,EAAAA,aAAa,CAACrC,IAAD,EAAO;AAClB,WAAO;AACLA,MAAAA,IADK;AAELO,MAAAA,SAAS,EAAE,EAFN;AAGLE,MAAAA,EAAE,EAAE,KAAKb,MAAL,EAHC;AAILuB,MAAAA,IAAI,EAAE,KAJD;AAKLW,MAAAA,OAAO,EAAE,OALJ;AAMLQ,MAAAA,YAAY,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AANT,KAAP;AAQD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE3C,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AAAA,UACM6C,cAAc,GAAG5C,QAAQ,CAACQ,MAAT,CAAgB,CAAC;AAAEa,MAAAA;AAAF,KAAD,KAAc,CAACA,IAA/B,EAAqCwB,MAD5D;AAEA,wBACE;AAAS,MAAA,SAAS,EAAC,SAAnB;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,iBAAiB,EAAE,KAAK5C,iBAAhC;AAAmD,QAAA,KAAK,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD;AACE,QAAA,QAAQ,EAAED,QADZ;AAEE,QAAA,cAAc,EAAE4C,cAFlB;AAGE,QAAA,mBAAmB,EAAE,KAAKvC,mBAH5B;AAIE,QAAA,gBAAgB,EAAE,KAAKuB,gBAJzB;AAKE,QAAA,gBAAgB,EAAE,KAAKZ,gBALzB;AAME,QAAA,gBAAgB,EAAE,KAAKM,gBANzB;AAOE,QAAA,aAAa,EAAE,KAAKZ,aAPtB;AAQE,QAAA,UAAU,EAAE,KAAKa;AARnB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA9GwC","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../header/header';\nimport Main from '../main/main';\nimport './app.css';\n\nexport default class App extends Component {\n  taskId = 100; // Ошибка. Разобраться.\n\n  state = { listToDo: [] };\n\n  getNewListToDo() {\n    const { listToDo } = this.state;\n    return JSON.parse(JSON.stringify(listToDo));\n  }\n\n  getTaskIndex(id) {\n    const { listToDo } = this.state;\n    return listToDo.findIndex((el) => el.id === id);\n  }\n\n  addTaskToListToDo = (text) => {\n    console.log(text)\n    // this.changeListToDo(100, (newListToDo) => {\n    //   const newTask = this.createNewTask(text);\n    //   newListToDo.unshift(newTask);\n    // });\n  };\n\n  clearCompletedTasks = () => {\n    this.setState(({ listToDo }) => {\n      const newListToDo = listToDo.filter(\n        ({ className }) => className !== 'completed',\n      );\n      return { listToDo: newListToDo };\n    });\n  };\n\n  editTaskValue = (id) => {\n    this.changeListToDo(id, (arg1, arg2, task) => {\n      task.className = 'editing';\n    });\n  };\n\n  saveNewTaskValue = (id, e) => {\n    this.changeListToDo(id, (arg, arg2, task) => {\n      task.text = e.target.value;\n      task.className = task.done ? 'completed' : '';\n    });\n  };\n\n  changeTaskStatus = (id) => {\n    this.changeListToDo(id, (arg1, arg2, task) => {\n      task.className = task.done ? '' : 'completed';\n      task.done = !task.done;\n    });\n  };\n\n  removeTaskFromToDoList = (id) => {\n    this.changeListToDo(id, (newListToDo, index) => newListToDo.splice(index, 1));\n  };\n\n  getTaskFromListToDo = (id, listToDo) => {\n    const index = this.getTaskIndex(id);\n    return listToDo[index];\n  };\n\n  selectTaskFilter = (label) => {\n    this.changeListToDo(100, (newListToDo) => {\n      newListToDo.map((el) => {\n        if (label === 'all') el.display = 'block';\n        else el.display = el.className === label ? 'block' : 'none';\n        return el;\n      });\n    });\n  };\n\n  changeListToDo = (id, cb) => {\n    this.setState(() => {\n      const newListToDo = this.getNewListToDo(),\n            index = this.getTaskIndex(id),\n            task = this.getTaskFromListToDo(id, newListToDo);\n      cb(newListToDo, index, task);\n      return { listToDo: newListToDo };\n    });\n  };\n\n  createNewTask(text) {\n    return {\n      text,\n      className: '',\n      id: this.taskId++,\n      done: false,\n      display: 'block',\n      timeOfCreate: new Date().getTime(),\n    };\n  }\n\n  render() {\n    const { listToDo } = this.state,\n          countTasksLeft = listToDo.filter(({ done }) => !done).length;\n    return (\n      <section className=\"todoapp\">\n        <Header addTaskToListToDo={this.addTaskToListToDo} asdas=\"aa\" />\n        <Main\n          taskList={listToDo}\n          countTasksLeft={countTasksLeft}\n          clearCompletedTasks={this.clearCompletedTasks}\n          selectTaskFilter={this.selectTaskFilter}\n          saveNewTaskValue={this.saveNewTaskValue}\n          changeTaskStatus={this.changeTaskStatus}\n          editTaskValue={this.editTaskValue}\n          deleteTask={this.removeTaskFromToDoList}\n        />\n      </section>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}