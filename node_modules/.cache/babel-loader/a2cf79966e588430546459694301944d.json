{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.js\";\nimport React, { Component } from 'react';\nimport Header from \"../header/header\";\nimport Main from \"../main/main\";\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.taskId = 666;\n    this.state = {\n      listToDo: [this.createNewTask('Рефакторинг'), this.createNewTask('Редактирование пустых задач'), this.createNewTask('Корректая дата'), this.createNewTask('Закончить приложение')]\n    };\n\n    this.getTaskFromListToDo = (id, listToDo) => {\n      const index = this.getTaskIndex(id);\n      return listToDo[index];\n    };\n\n    this.changeListToDo = (id, cb) => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newListToDo = this.getNewListToDo(),\n              index = this.getTaskIndex(id),\n              task = this.getTaskFromListToDo(id, newListToDo);\n        cb(newListToDo, index, task);\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n\n    this.removeTaskFromToDoList = id => {\n      this.changeListToDo(id, (newListToDo, index) => newListToDo.splice(index, 1));\n    };\n\n    this.changeTaskStatus = id => {\n      this.changeListToDo(id, (arg1, arg2, {\n        className,\n        done\n      }) => {\n        className = done ? '' : 'completed';\n        done = !done; // task.className = task.done ? '' : 'completed';\n        // task.done = !task.done;\n      });\n    };\n\n    this.editTaskValue = id => {\n      this.changeListToDo(id, (arg1, arg2, task) => {\n        task.className = 'editing';\n      });\n    };\n\n    this.saveEditingTask = (id, e) => {\n      this.changeListToDo(id, (arg, arg2, task) => {\n        task.text = e.target.value;\n        task.done === false ? task.className = '' : task.className = 'completed';\n      });\n    };\n\n    this.selectTaskFilter = label => {\n      this.changeListToDo(666, newListToDo => {\n        newListToDo.map(el => {\n          if (label === 'all') el.display = 'block';else el.className === label ? el.display = 'block' : el.display = 'none';\n          return el;\n        });\n      });\n    };\n\n    this.clearCompletedTask = () => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newList = listToDo.filter(el => el.className !== 'completed');\n        return {\n          listToDo: newList\n        };\n      });\n    };\n\n    this.addNewTask = text => {\n      this.changeListToDo(666, newListToDo => {\n        const newElement = this.createNewTask(text);\n        newListToDo.unshift(newElement);\n      });\n    };\n  }\n\n  createNewTask(text) {\n    return {\n      text: text,\n      className: '',\n      id: this.taskId++,\n      done: false,\n      display: 'block',\n      timeOfCreate: new Date().getTime() // на Date пробрасывает ошибку при добавлении новый экземпляров.\n\n    };\n  }\n\n  getTaskIndex(id) {\n    return this.state.listToDo.findIndex(el => el.id === id);\n  }\n\n  getNewListToDo() {\n    return JSON.parse(JSON.stringify(this.state.listToDo));\n  }\n\n  render() {\n    const {\n      listToDo\n    } = this.state;\n    const countTaskLeft = listToDo.filter(({\n      done\n    }) => !done).length;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        addNewTask: this.addNewTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        taskList: this.state.listToDo,\n        countTaskLeft: countTaskLeft,\n        clearCompletedTask: this.clearCompletedTask,\n        selectTaskFilter: this.selectTaskFilter,\n        saveEditingTask: this.saveEditingTask,\n        changeTaskStatus: this.changeTaskStatus,\n        editTaskValue: this.editTaskValue,\n        deleteTask: this.removeTaskFromToDoList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.js"],"names":["React","Component","Header","Main","App","taskId","state","listToDo","createNewTask","getTaskFromListToDo","id","index","getTaskIndex","changeListToDo","cb","setState","newListToDo","getNewListToDo","task","removeTaskFromToDoList","splice","changeTaskStatus","arg1","arg2","className","done","editTaskValue","saveEditingTask","e","arg","text","target","value","selectTaskFilter","label","map","el","display","clearCompletedTask","newList","filter","addNewTask","newElement","unshift","timeOfCreate","Date","getTime","findIndex","JSON","parse","stringify","render","countTaskLeft","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Header from \"../header/header\";\r\nimport Main from \"../main/main\";\r\nimport './app.css';\r\n\r\nexport default class App extends Component {\r\n\r\n    taskId = 666;\r\n\r\n    state = {\r\n        listToDo: [\r\n            this.createNewTask('Рефакторинг'),\r\n            this.createNewTask('Редактирование пустых задач'),\r\n            this.createNewTask('Корректая дата'),\r\n            this.createNewTask('Закончить приложение'),\r\n        ]\r\n    }\r\n\r\n    createNewTask(text) {\r\n        return {\r\n            text: text,\r\n            className: '',\r\n            id: this.taskId++,\r\n            done: false,\r\n            display: 'block',\r\n            timeOfCreate: new Date().getTime()// на Date пробрасывает ошибку при добавлении новый экземпляров.\r\n        }\r\n    }\r\n\r\n    getTaskIndex(id) {\r\n        return this.state.listToDo.findIndex((el) => el.id === id);\r\n    }\r\n\r\n    getNewListToDo() {\r\n        return JSON.parse(JSON.stringify(this.state.listToDo));\r\n    }\r\n\r\n    getTaskFromListToDo = (id, listToDo) => {\r\n        const index = this.getTaskIndex(id);\r\n        return listToDo[index];\r\n    }\r\n\r\n    changeListToDo = (id, cb) => {\r\n        this.setState(({listToDo}) => {\r\n            const newListToDo = this.getNewListToDo(),\r\n                  index = this.getTaskIndex(id),\r\n                  task = this.getTaskFromListToDo(id, newListToDo);\r\n            cb(newListToDo, index, task);\r\n            return {\r\n                listToDo: newListToDo\r\n            }\r\n        });\r\n    }\r\n\r\n    removeTaskFromToDoList = (id) => {\r\n        this.changeListToDo(id, (newListToDo, index) => newListToDo.splice(index, 1));\r\n    }\r\n\r\n    changeTaskStatus = (id) => {\r\n        this.changeListToDo(id, (arg1, arg2, {className, done}) => {\r\n            className = done ? '' : 'completed';\r\n           done = !done;\r\n           // task.className = task.done ? '' : 'completed';\r\n            // task.done = !task.done;\r\n        });\r\n    }\r\n\r\n    editTaskValue = (id) => {\r\n        this.changeListToDo(id, (arg1, arg2, task) => {\r\n            task.className = 'editing';\r\n        });\r\n    }\r\n\r\n    saveEditingTask = (id, e) => {\r\n        this.changeListToDo(id, (arg, arg2, task) => {\r\n            task.text = e.target.value;\r\n            task.done === false ? task.className = '' : task.className = 'completed';\r\n        });\r\n    }\r\n\r\n    selectTaskFilter = (label) => {\r\n        this.changeListToDo(666, (newListToDo) => {\r\n            newListToDo.map((el) => {\r\n                if (label === 'all') el.display = 'block';\r\n                else el.className === label ? el.display = 'block' : el.display = 'none';\r\n                return el;\r\n            })\r\n        })\r\n    }\r\n\r\n    clearCompletedTask = () => {\r\n        this.setState(({listToDo}) => {\r\n            const newList = listToDo.filter((el) => el.className !== 'completed');\r\n            return {listToDo: newList};\r\n        })\r\n    }\r\n\r\n    addNewTask = (text) => {\r\n        this.changeListToDo(666, (newListToDo) => {\r\n            const newElement = this.createNewTask(text);\r\n            newListToDo.unshift(newElement);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {listToDo} = this.state;\r\n        const countTaskLeft = listToDo.filter(({done}) => !done).length;\r\n        return (\r\n            <section className='todoapp'>\r\n                <Header addNewTask={this.addNewTask}/>\r\n                <Main taskList={this.state.listToDo}\r\n                      countTaskLeft={countTaskLeft}\r\n                      clearCompletedTask={this.clearCompletedTask}\r\n                      selectTaskFilter={this.selectTaskFilter}\r\n                      saveEditingTask={this.saveEditingTask}\r\n                      changeTaskStatus={this.changeTaskStatus}\r\n                      editTaskValue={this.editTaskValue}\r\n                      deleteTask={this.removeTaskFromToDoList}\r\n                />\r\n            </section>\r\n        );\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}