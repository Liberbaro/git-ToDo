{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\task-status\\\\task-status.js\";\nimport React, { Component } from 'react';\nimport { formatDistance, formatDistanceToNow } from 'date-fns';\nexport default class TaskStatus extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      time: formatDistanceToNow(this.props.timeOfCreate, {\n        includeSeconds: true\n      }) // time: formatDistanceToNow(this.props.timeOfCreate, { includeSeconds: true }),\n\n    };\n\n    this.update = () => {\n      const {\n        timeOfCreate\n      } = this.props;\n      this.setState({\n        distance: formatDistanceToNow(timeOfCreate, {\n          includeSeconds: true\n        })\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.timerID = setInterval(() => this.update(), 1000);\n    };\n\n    this.componentWillUnmount = () => {\n      clearTimeout(this.timerID);\n    };\n  }\n\n  render() {\n    const {\n      className,\n      text,\n      timeOfCreate\n    } = this.props;\n    const {\n      time\n    } = this.state; // let time = formatDistanceToNow(timeOfCreate, {includeSeconds: true}  )\n\n    if (className === 'description') {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: className,\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 20\n      }, this);\n    } else if (className === 'created') {\n      // const date = .getDay()\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: className,\n        children: [\"  created \", `${time}`, \"  ago\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/project/react/todo/src/components/task-status/task-status.js"],"names":["React","Component","formatDistance","formatDistanceToNow","TaskStatus","state","time","props","timeOfCreate","includeSeconds","update","setState","distance","componentDidMount","timerID","setInterval","componentWillUnmount","clearTimeout","render","className","text"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,SAASC,cAAT,EAAyBC,mBAAzB,QAAoD,UAApD;AAEA,eAAe,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAE9CI,KAF8C,GAEtC;AACJC,MAAAA,IAAI,EAAEH,mBAAmB,CAAC,KAAKI,KAAL,CAAWC,YAAZ,EAA0B;AAAEC,QAAAA,cAAc,EAAE;AAAlB,OAA1B,CADrB,CAEJ;;AAFI,KAFsC;;AAAA,SAM9CC,MAN8C,GAMrC,MAAM;AACX,YAAM;AAAEF,QAAAA;AAAF,UAAmB,KAAKD,KAA9B;AACA,WAAKI,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAET,mBAAmB,CAACK,YAAD,EAAe;AAAEC,UAAAA,cAAc,EAAE;AAAlB,SAAf;AADnB,OAAd;AAGH,KAX6C;;AAAA,SAa9CI,iBAb8C,GAa1B,MAAM;AACtB,WAAKC,OAAL,GAAeC,WAAW,CAAC,MAAM,KAAKL,MAAL,EAAP,EAAsB,IAAtB,CAA1B;AACH,KAf6C;;AAAA,SAgB9CM,oBAhB8C,GAgBvB,MAAM;AACzBC,MAAAA,YAAY,CAAC,KAAKH,OAAN,CAAZ;AACH,KAlB6C;AAAA;;AAwB9CI,EAAAA,MAAM,GAAG;AACT,UAAM;AAACC,MAAAA,SAAD;AAAYC,MAAAA,IAAZ;AAAkBZ,MAAAA;AAAlB,QAAkC,KAAKD,KAA7C;AACC,UAAM;AAACD,MAAAA;AAAD,QAAS,KAAKD,KAApB,CAFQ,CAIL;;AACA,QAAGc,SAAS,KAAI,aAAhB,EAA8B;AAC1B,0BAAO;AAAM,QAAA,SAAS,EAAEA,SAAjB;AAAA,kBAA8BC;AAA9B;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFD,MAGK,IAAGD,SAAS,KAAK,SAAjB,EAA4B;AAC7B;AACA,0BAAQ;AAAM,QAAA,SAAS,EAAEA,SAAjB;AAAA,iCAAwC,GAAEb,IAAK,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AACH;AACJ;;AApC6C","sourcesContent":["import React, {Component} from  'react'\r\nimport { formatDistance, formatDistanceToNow } from 'date-fns'\r\n\r\nexport default class TaskStatus extends Component {\r\n\r\n    state = {\r\n        time: formatDistanceToNow(this.props.timeOfCreate, { includeSeconds: true }),\r\n        // time: formatDistanceToNow(this.props.timeOfCreate, { includeSeconds: true }),\r\n    }\r\n    update = () => {\r\n        const { timeOfCreate } = this.props;\r\n        this.setState({\r\n            distance: formatDistanceToNow(timeOfCreate, { includeSeconds: true }),\r\n        });\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        this.timerID = setInterval(() => this.update(), 1000);\r\n    };\r\n    componentWillUnmount = () => {\r\n        clearTimeout(this.timerID);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n    const {className, text, timeOfCreate} = this.props\r\n     const {time} = this.state\r\n\r\n        // let time = formatDistanceToNow(timeOfCreate, {includeSeconds: true}  )\r\n        if(className ==='description'){\r\n            return <span className={className} >{text}</span>\r\n        }\r\n        else if(className === 'created') {\r\n            // const date = .getDay()\r\n            return  <span className={className}>  created {`${time}`}  ago</span>\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}