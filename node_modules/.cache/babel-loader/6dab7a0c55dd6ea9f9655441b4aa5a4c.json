{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.js\";\nimport React, { Component } from 'react';\nimport Header from \"../header/header\";\nimport Main from \"../main/main\";\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.maxID = 666;\n    this.state = {\n      listToDo: [this.createNewTask('Completed'), this.createNewTask('Editing'), this.createNewTask('Active')]\n    };\n\n    this.taskEditing = (id, task, text) => {\n      this.changeStatus(id); // this.setState(({listToDo})=>{\n      //     const newArr =  JSON.parse(JSON.stringify(listToDo))\n      //     const inx = listToDo.findIndex((el)=>el.id === id)\n      //     if(task === 'del'){\n      //         newArr.splice(inx, 1)\n      //     }\n      //     else if(text) {\n      //         newArr[inx].className = 'completed'\n      //         newArr[inx].text = text;\n      //     }else{\n      //         newArr[inx].className = `${task}`\n      //     }\n      //     return {\n      //         listToDo: newArr\n      //     }\n      // })\n    };\n  }\n\n  createNewTask(text) {\n    return {\n      text: text,\n      className: '',\n      id: this.maxID++\n    };\n  } // addElement =()=>{\n  //     this.setState(({listToDo})=>{\n  //         const newArr =  JSON.parse(JSON.stringify(listToDo))\n  //         const newElement = this.createNewTask('random')\n  //         newArr.unshift(newElement)\n  //         return  {\n  //             listToDo: newArr\n  //         }\n  //     })\n  // }\n\n\n  getIdx(id) {\n    const inx = this.state.listToDo.findIndex(el => el.id === id);\n    return inx;\n  }\n\n  cloneToDo() {\n    return JSON.parse(JSON.stringify(this.state.listToDo));\n  }\n\n  changeStatus(id) {\n    this.setState(({\n      listToDo\n    }) => {\n      const newList = this.cloneToDo();\n      const inx = this.getIdx(id);\n      newList[inx].className === '' ? newList[inx].className = 'completed' : newList[inx].className = '';\n      return {\n        listToDo: newList\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        addElement: this.addElement,\n        changeStatus: this.changeStatus,\n        taskEditing: this.taskEditing,\n        createNewTask: this.createNewTask,\n        taskList: this.state.listToDo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this);\n  }\n\n} //\n// taskEditing = (id, task, val)=>{\n//     this.setState(({listToDo})=>{\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\n//         const inx = listToDo.findIndex((el)=>el.id === id)\n//         if(task === 'del'){\n//             newArr.splice(inx, 1)\n//         }\n//         else if(val) {\n//             newArr[inx].className = 'completed'\n//             newArr[inx].text = val;\n//         }else{\n//             newArr[inx].className = `${task}`\n//         }\n//         return {\n//             listToDo: newArr\n//         }\n//     })\n// }\n// export default App;\n//\n// import React from 'react';\n// import Header from \"../header/header\";\n// import Main from \"../main/main\";\n// import './app.css'\n//\n// const App = () =>{\n//\n//     return (\n//         <section className='todoapp'>\n//             <Header/>\n//             <Main/>\n//         </section>\n//     );\n// }\n//\n// export default App;","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.js"],"names":["React","Component","Header","Main","App","maxID","state","listToDo","createNewTask","taskEditing","id","task","text","changeStatus","className","getIdx","inx","findIndex","el","cloneToDo","JSON","parse","stringify","setState","newList","render","addElement"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAO,WAAP;AAEA,eAAe,MAAMC,GAAN,SAAkBH,SAAlB,CAA2B;AAAA;AAAA;AAAA,SAEtCI,KAFsC,GAE9B,GAF8B;AAAA,SAGtCC,KAHsC,GAG9B;AACJC,MAAAA,QAAQ,EAAE,CACN,KAAKC,aAAL,CAAmB,WAAnB,CADM,EAEN,KAAKA,aAAL,CAAmB,SAAnB,CAFM,EAGN,KAAKA,aAAL,CAAmB,QAAnB,CAHM;AADN,KAH8B;;AAAA,SAqDtCC,WArDsC,GAqDxB,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,KAAkB;AAEpC,WAAKC,YAAL,CAAkBH,EAAlB,EAFoC,CAG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAxEqC;AAAA;;AAWtCF,EAAAA,aAAa,CAAEI,IAAF,EAAO;AAChB,WAAO;AACHA,MAAAA,IAAI,EAAEA,IADH;AAEHE,MAAAA,SAAS,EAAE,EAFR;AAGHJ,MAAAA,EAAE,EAAG,KAAKL,KAAL;AAHF,KAAP;AAKH,GAjBqC,CAoBtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAU,EAAAA,MAAM,CAAEL,EAAF,EAAK;AACH,UAAMM,GAAG,GAAG,KAAKV,KAAL,CAAWC,QAAX,CAAoBU,SAApB,CAA+BC,EAAD,IAAMA,EAAE,CAACR,EAAH,KAAUA,EAA9C,CAAZ;AACA,WAAOM,GAAP;AACP;;AAEDG,EAAAA,SAAS,GAAG;AACR,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKhB,KAAL,CAAWC,QAA1B,CAAX,CAAP;AACH;;AAGDM,EAAAA,YAAY,CAAEH,EAAF,EAAK;AACb,SAAKa,QAAL,CAAc,CAAC;AAAChB,MAAAA;AAAD,KAAD,KAAc;AACxB,YAAMiB,OAAO,GAAG,KAAKL,SAAL,EAAhB;AACA,YAAMH,GAAG,GAAG,KAAKD,MAAL,CAAYL,EAAZ,CAAZ;AACAc,MAAAA,OAAO,CAACR,GAAD,CAAP,CAAaF,SAAb,KAA2B,EAA3B,GAAgCU,OAAO,CAACR,GAAD,CAAP,CAAaF,SAAb,GAAyB,WAAzD,GAAsEU,OAAO,CAACR,GAAD,CAAP,CAAaF,SAAb,GAAyB,EAA/F;AACA,aAAO;AACHP,QAAAA,QAAQ,EAAEiB;AADP,OAAP;AAGH,KAPD;AAQH;;AAyBDC,EAAAA,MAAM,GAAG;AACT,wBACI;AAAS,MAAA,SAAS,EAAC,SAAnB;AAAA,8BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD;AAAM,QAAA,UAAU,EAAE,KAAKC,UAAvB;AACM,QAAA,YAAY,EAAE,KAAKb,YADzB;AAEM,QAAA,WAAW,EAAE,KAAKJ,WAFxB;AAGM,QAAA,aAAa,EAAE,KAAKD,aAH1B;AAIM,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWC;AAJ3B;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AAtFyC,C,CAyF1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {Component} from 'react';\r\nimport Header from \"../header/header\";\r\nimport Main from \"../main/main\";\r\nimport './app.css'\r\n\r\nexport default class App extends Component{\r\n\r\n    maxID = 666;\r\n    state = {\r\n        listToDo: [\r\n            this.createNewTask('Completed'),\r\n            this.createNewTask('Editing'),\r\n            this.createNewTask('Active'),\r\n        ]\r\n    }\r\n\r\n    createNewTask (text){\r\n        return {\r\n            text: text,\r\n            className: '',\r\n            id:  this.maxID++\r\n        }\r\n    }\r\n\r\n\r\n    // addElement =()=>{\r\n    //     this.setState(({listToDo})=>{\r\n    //         const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n    //         const newElement = this.createNewTask('random')\r\n    //         newArr.unshift(newElement)\r\n    //         return  {\r\n    //             listToDo: newArr\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    getIdx (id){\r\n            const inx = this.state.listToDo.findIndex((el)=>el.id === id)\r\n            return inx;\r\n    }\r\n\r\n    cloneToDo (){\r\n        return JSON.parse(JSON.stringify(this.state.listToDo))\r\n    }\r\n\r\n\r\n    changeStatus (id){\r\n        this.setState(({listToDo})=>{\r\n            const newList = this.cloneToDo();\r\n            const inx = this.getIdx(id)\r\n            newList[inx].className === ''?  newList[inx].className = 'completed': newList[inx].className = '';\r\n            return {\r\n                listToDo: newList\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    taskEditing = (id, task, text)=>{\r\n\r\nthis.changeStatus(id)\r\n        // this.setState(({listToDo})=>{\r\n        //     const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n        //     const inx = listToDo.findIndex((el)=>el.id === id)\r\n        //     if(task === 'del'){\r\n        //         newArr.splice(inx, 1)\r\n        //     }\r\n        //     else if(text) {\r\n        //         newArr[inx].className = 'completed'\r\n        //         newArr[inx].text = text;\r\n        //     }else{\r\n        //         newArr[inx].className = `${task}`\r\n        //     }\r\n        //     return {\r\n        //         listToDo: newArr\r\n        //     }\r\n        // })\r\n    }\r\n\r\n\r\n    render() {\r\n    return (\r\n        <section className='todoapp'>\r\n            <Header/>\r\n            <Main addElement={this.addElement}\r\n                  changeStatus={this.changeStatus}\r\n                  taskEditing={this.taskEditing}\r\n                  createNewTask={this.createNewTask}\r\n                  taskList={this.state.listToDo}/>\r\n        </section>\r\n    );\r\n}\r\n\r\n}\r\n//\r\n// taskEditing = (id, task, val)=>{\r\n//     this.setState(({listToDo})=>{\r\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n//         const inx = listToDo.findIndex((el)=>el.id === id)\r\n//         if(task === 'del'){\r\n//             newArr.splice(inx, 1)\r\n//         }\r\n//         else if(val) {\r\n//             newArr[inx].className = 'completed'\r\n//             newArr[inx].text = val;\r\n//         }else{\r\n//             newArr[inx].className = `${task}`\r\n//         }\r\n//         return {\r\n//             listToDo: newArr\r\n//         }\r\n//     })\r\n// }\r\n\r\n// export default App;\r\n\r\n//\r\n// import React from 'react';\r\n// import Header from \"../header/header\";\r\n// import Main from \"../main/main\";\r\n// import './app.css'\r\n//\r\n// const App = () =>{\r\n//\r\n//     return (\r\n//         <section className='todoapp'>\r\n//             <Header/>\r\n//             <Main/>\r\n//         </section>\r\n//     );\r\n// }\r\n//\r\n// export default App;\r\n"]},"metadata":{},"sourceType":"module"}