{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.jsx\";\nimport React, { Component } from 'react';\nimport Header from '../header/header';\nimport Main from '../main/main';\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.taskId = 100;\n    this.state = {\n      listToDo: [],\n      activeFilter: 'All'\n    };\n\n    this.addTaskToListToDo = text => {\n      this.changeListToDo(100, newListToDo => {\n        const newTask = this.createNewTask(text);\n        console.log(newTask);\n        newListToDo.unshift(newTask);\n      });\n    };\n\n    this.clearCompletedTasks = () => {\n      this.setState(({\n        listToDo\n      }) => {\n        const newListToDo = listToDo.filter(({\n          className\n        }) => className !== 'completed');\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n\n    this.editTaskValue = id => {\n      this.changeListToDo(id, (arg1, arg2, task) => {\n        task.className = 'editing';\n      });\n    };\n\n    this.saveNewTaskValue = (id, e) => {\n      this.changeListToDo(id, (arg, arg2, task) => {\n        task.text = e.target.value;\n        task.className = task.done ? 'completed' : '';\n      });\n    };\n\n    this.changeTaskStatus = id => {\n      this.changeListToDo(id, (arg1, arg2, task) => {\n        task.className = task.done ? '' : 'completed';\n        task.done = !task.done;\n        console.log(task.filter); // eslint-disable-next-line react/destructuring-assignment\n\n        if (this.state.activeFilter === 'all') task.display = 'block'; // eslint-disable-next-line react/destructuring-assignment\n        else task.display = task.className === this.state.activeFilter ? 'block' : 'none'; // if (task.filter === 'all') task.display = 'block';\n        // else task.display = task.className === task.filter ? 'block' : 'none';\n      });\n    };\n\n    this.removeTaskFromToDoList = id => {\n      this.changeListToDo(id, (newListToDo, index) => newListToDo.splice(index, 1));\n    };\n\n    this.getTaskFromListToDo = (id, listToDo) => {\n      const index = this.getTaskIndex(id);\n      return listToDo[index];\n    };\n\n    this.selectTaskFilter = label => {\n      this.changeListToDo(100, newListToDo => {\n        newListToDo.map(el => {\n          el.filter = label;\n          if (label === 'all') el.display = 'block';else el.display = el.className === label ? 'block' : 'none';\n          return el;\n        });\n      });\n      this.test(label);\n    };\n\n    this.test = filter => {\n      // eslint-disable-next-line no-unused-vars\n      this.setState(({\n        listToDo,\n        activeFilter\n      }) => {\n        return {\n          listToDo,\n          activeFilter: filter\n        };\n      });\n    };\n\n    this.changeListToDo = (id, cb) => {\n      this.setState(() => {\n        const newListToDo = this.getNewListToDo(),\n              index = this.getTaskIndex(id),\n              task = this.getTaskFromListToDo(id, newListToDo);\n        cb(newListToDo, index, task);\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n  }\n\n  getNewListToDo() {\n    const {\n      listToDo\n    } = this.state;\n    return JSON.parse(JSON.stringify(listToDo));\n  }\n\n  getTaskIndex(id) {\n    const {\n      listToDo\n    } = this.state;\n    return listToDo.findIndex(el => el.id === id);\n  }\n\n  createNewTask(text) {\n    return {\n      text,\n      className: '',\n      id: this.taskId++,\n      done: false,\n      display: 'block',\n      timeOfCreate: new Date().getTime(),\n      // eslint-disable-next-line react/destructuring-assignment\n      filter: this.state.activeFilter\n    };\n  }\n\n  render() {\n    const {\n      listToDo\n    } = this.state,\n          countTasksLeft = listToDo.filter(({\n      done\n    }) => !done).length;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        addTaskToListToDo: this.addTaskToListToDo,\n        asdas: \"aa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        taskList: listToDo,\n        countTasksLeft: countTasksLeft,\n        clearCompletedTasks: this.clearCompletedTasks,\n        selectTaskFilter: this.selectTaskFilter,\n        saveNewTaskValue: this.saveNewTaskValue,\n        changeTaskStatus: this.changeTaskStatus,\n        editTaskValue: this.editTaskValue,\n        removeTaskFromToDoList: this.removeTaskFromToDoList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.jsx"],"names":["React","Component","Header","Main","App","taskId","state","listToDo","activeFilter","addTaskToListToDo","text","changeListToDo","newListToDo","newTask","createNewTask","console","log","unshift","clearCompletedTasks","setState","filter","className","editTaskValue","id","arg1","arg2","task","saveNewTaskValue","e","arg","target","value","done","changeTaskStatus","display","removeTaskFromToDoList","index","splice","getTaskFromListToDo","getTaskIndex","selectTaskFilter","label","map","el","test","cb","getNewListToDo","JSON","parse","stringify","findIndex","timeOfCreate","Date","getTime","render","countTasksLeft","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../header/header';\nimport Main from '../main/main';\nimport './app.css';\n\nexport default class App extends Component {\n  taskId = 100;\n\n  state = {\n    listToDo: [],\n    activeFilter: 'All',\n  };\n\n  getNewListToDo() {\n    const { listToDo } = this.state;\n    return JSON.parse(JSON.stringify(listToDo));\n  }\n\n  getTaskIndex(id) {\n    const { listToDo } = this.state;\n    return listToDo.findIndex((el) => el.id === id);\n  }\n\n  addTaskToListToDo = (text) => {\n    this.changeListToDo(100, (newListToDo) => {\n      const newTask = this.createNewTask(text);\n      console.log(newTask);\n      newListToDo.unshift(newTask);\n    });\n  };\n\n  clearCompletedTasks = () => {\n    this.setState(({ listToDo }) => {\n      const newListToDo = listToDo.filter(\n        ({ className }) => className !== 'completed',\n      );\n      return { listToDo: newListToDo };\n    });\n  };\n\n  editTaskValue = (id) => {\n    this.changeListToDo(id, (arg1, arg2, task) => {\n      task.className = 'editing';\n    });\n  };\n\n  saveNewTaskValue = (id, e) => {\n    this.changeListToDo(id, (arg, arg2, task) => {\n      task.text = e.target.value;\n      task.className = task.done ? 'completed' : '';\n    });\n  };\n\n  changeTaskStatus = (id) => {\n    this.changeListToDo(id, (arg1, arg2, task) => {\n      task.className = task.done ? '' : 'completed';\n      task.done = !task.done;\n      console.log(task.filter);\n      // eslint-disable-next-line react/destructuring-assignment\n      if (this.state.activeFilter === 'all') task.display = 'block';\n      // eslint-disable-next-line react/destructuring-assignment\n      else task.display = task.className === this.state.activeFilter ? 'block' : 'none';\n      // if (task.filter === 'all') task.display = 'block';\n      // else task.display = task.className === task.filter ? 'block' : 'none';\n    });\n  };\n\n  removeTaskFromToDoList = (id) => {\n    this.changeListToDo(id, (newListToDo, index) => newListToDo.splice(index, 1));\n  };\n\n  getTaskFromListToDo = (id, listToDo) => {\n    const index = this.getTaskIndex(id);\n    return listToDo[index];\n  };\n\n  selectTaskFilter = (label) => {\n    this.changeListToDo(100, (newListToDo) => {\n      newListToDo.map((el) => {\n        el.filter = label;\n        if (label === 'all') el.display = 'block';\n        else el.display = el.className === label ? 'block' : 'none';\n        return el;\n      });\n    });\n    this.test(label);\n  };\n\n  test = (filter) => {\n    // eslint-disable-next-line no-unused-vars\n    this.setState(({ listToDo, activeFilter }) => {\n      return {\n        listToDo,\n        activeFilter: filter,\n      };\n    });\n  }\n\n  changeListToDo = (id, cb) => {\n    this.setState(() => {\n      const newListToDo = this.getNewListToDo(),\n            index = this.getTaskIndex(id),\n            task = this.getTaskFromListToDo(id, newListToDo);\n      cb(newListToDo, index, task);\n      return { listToDo: newListToDo };\n    });\n  };\n\n  createNewTask(text) {\n    return {\n      text,\n      className: '',\n      id: this.taskId++,\n      done: false,\n      display: 'block',\n      timeOfCreate: new Date().getTime(),\n      // eslint-disable-next-line react/destructuring-assignment\n      filter: this.state.activeFilter,\n    };\n  }\n\n  render() {\n    const { listToDo } = this.state,\n          countTasksLeft = listToDo.filter(({ done }) => !done).length;\n    return (\n      <section className=\"todoapp\">\n        <Header addTaskToListToDo={this.addTaskToListToDo} asdas=\"aa\" />\n        <Main\n          taskList={listToDo}\n          countTasksLeft={countTasksLeft}\n          clearCompletedTasks={this.clearCompletedTasks}\n          selectTaskFilter={this.selectTaskFilter}\n          saveNewTaskValue={this.saveNewTaskValue}\n          changeTaskStatus={this.changeTaskStatus}\n          editTaskValue={this.editTaskValue}\n          removeTaskFromToDoList={this.removeTaskFromToDoList}\n        />\n      </section>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}