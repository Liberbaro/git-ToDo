{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\task-label\\\\task-label.jsx\";\n\n/* eslint-disable react/destructuring-assignment */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNow } from 'date-fns';\nexport default class TaskLabel extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      time: formatDistanceToNow(this.props.timeOfCreate, {\n        includeSeconds: true\n      })\n    };\n\n    this.tick = () => {\n      this.setState({\n        time: formatDistanceToNow(this.props.timeOfCreate, {\n          includeSeconds: true\n        })\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.intervalID = setInterval(() => this.tick(), 1000);\n    };\n\n    this.componentWillUnmount = () => {\n      clearInterval(this.intervalID);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"description\",\n        children: [\" \", this.props.text, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"created\",\n        children: [\" created \", `${this.state.time}`, \" ago \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nTaskLabel.defaultProps = {\n  text: 'New Task'\n};\nTaskLabel.propTypes = {\n  timeOfCreate: PropTypes.number.isRequired,\n  text: PropTypes.objectOf(PropTypes.string) // text: PropTypes.string,\n\n};","map":{"version":3,"sources":["D:/project/react/todo/src/components/task-label/task-label.jsx"],"names":["React","Component","PropTypes","formatDistanceToNow","TaskLabel","state","time","props","timeOfCreate","includeSeconds","tick","setState","componentDidMount","intervalID","setInterval","componentWillUnmount","clearInterval","render","text","defaultProps","propTypes","number","isRequired","objectOf","string"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,mBAAT,QAAoC,UAApC;AAEA,eAAe,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAS/CI,KAT+C,GASvC;AAAEC,MAAAA,IAAI,EAAEH,mBAAmB,CAAC,KAAKI,KAAL,CAAWC,YAAZ,EAA0B;AAAEC,QAAAA,cAAc,EAAE;AAAlB,OAA1B;AAA3B,KATuC;;AAAA,SAW/CC,IAX+C,GAWxC,MAAM;AACX,WAAKC,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAEH,mBAAmB,CAAC,KAAKI,KAAL,CAAWC,YAAZ,EAA0B;AAAEC,UAAAA,cAAc,EAAE;AAAlB,SAA1B;AAA3B,OAAd;AACD,KAb8C;;AAAA,SAe/CG,iBAf+C,GAe3B,MAAM;AACxB,WAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM,KAAKJ,IAAL,EAAP,EAAoB,IAApB,CAA7B;AACD,KAjB8C;;AAAA,SAmB/CK,oBAnB+C,GAmBxB,MAAM;AAC3BC,MAAAA,aAAa,CAAC,KAAKH,UAAN,CAAb;AACD,KArB8C;AAAA;;AAuB/CI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA,wBAAgC,KAAKV,KAAL,CAAWW,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,SAAS,EAAC,SAAhB;AAAA,gCAAqC,GAAE,KAAKb,KAAL,CAAWC,IAAK,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AA9B8C;AAA5BF,S,CACZe,Y,GAAe;AAAED,EAAAA,IAAI,EAAE;AAAR,C;AADHd,S,CAGZgB,S,GAAY;AACjBZ,EAAAA,YAAY,EAAEN,SAAS,CAACmB,MAAV,CAAiBC,UADd;AAEjBJ,EAAAA,IAAI,EAAEhB,SAAS,CAACqB,QAAV,CAAmBrB,SAAS,CAACsB,MAA7B,CAFW,CAGjB;;AAHiB,C","sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNow } from 'date-fns';\n\nexport default class TaskLabel extends Component {\n  static defaultProps = { text: 'New Task' };\n\n  static propTypes = {\n    timeOfCreate: PropTypes.number.isRequired,\n    text: PropTypes.objectOf(PropTypes.string),\n    // text: PropTypes.string,\n  };\n\n  state = { time: formatDistanceToNow(this.props.timeOfCreate, { includeSeconds: true }) };\n\n  tick = () => {\n    this.setState({ time: formatDistanceToNow(this.props.timeOfCreate, { includeSeconds: true }) });\n  };\n\n  componentDidMount = () => {\n    this.intervalID = setInterval(() => this.tick(), 1000);\n  };\n\n  componentWillUnmount = () => {\n    clearInterval(this.intervalID);\n  };\n\n  render() {\n    return (\n      <label>\n        <span className=\"description\"> {this.props.text} </span>\n        <span className=\"created\"> created {`${this.state.time}`} ago </span>\n      </label>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}