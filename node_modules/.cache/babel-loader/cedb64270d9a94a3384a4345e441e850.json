{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\todo\\\\src\\\\components\\\\app\\\\app.js\";\nimport React, { Component } from 'react';\nimport Header from \"../header/header\";\nimport Main from \"../main/main\";\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.maxID = 666;\n    this.state = {\n      listToDo: [this.createNewTask('Completed'), this.createNewTask('Editing'), this.createNewTask('Active'), this.createNewTask('Закончить приложение')]\n    };\n\n    this.getTaskFromState = (id, newList) => {\n      const index = this.getIndex(id);\n      return newList[index];\n    };\n\n    this.changeState = (id, cb) => {\n      this.setState(({\n        listToDo\n      }) => {\n        let newListToDo = this.getNewListToDo();\n        const task = this.getTaskFromState(id, newListToDo);\n        const index = this.getIndex(id);\n        cb(newListToDo, index, task);\n        return {\n          listToDo: newListToDo\n        };\n      });\n    };\n\n    this.showMePls = label => {\n      this.changeState(666, (newListToDo, index, task) => {\n        const filter = newListToDo.map(el => {\n          el.display = 'none';\n          console.log(el.display);\n        });\n        console.log(filter); // return {\n        //     listToDo: filter\n        // }\n\n        newListToDo = filter; // console.log(filter)\n        // if(label === 'All'){\n        //     console.log(newListToDo)\n        // }else if(label === ''){\n        // }else if(label === ''){\n        // }\n      });\n    };\n\n    this.addElement = text => {\n      this.changeState(666, newListToDo => {\n        const newElement = this.createNewTask(text);\n        newListToDo.unshift(newElement);\n      });\n    };\n\n    this.changeStatus = id => {\n      this.changeState(id, (arg1, arg2, task) => {\n        if (task.done === false) {\n          task.className = 'completed';\n          task.done = true;\n        } else {\n          task.className = '';\n          task.done = false;\n        }\n      });\n    };\n\n    this.deleteTask = id => {\n      this.changeState(id, (newListToDo, index) => newListToDo.splice(index, 1));\n    };\n\n    this.editingTask = id => {\n      this.changeState(id, (arg1, arg2, task) => {\n        task.className = 'editing';\n      });\n    };\n\n    this.editTask = (id, event) => {\n      this.changeState(id, (arg, arg2, task) => {\n        if (event.keyCode == 13) {\n          task.text = event.target.value;\n          task.done === false ? task.className = '' : task.className = 'completed';\n        }\n      });\n    };\n  }\n\n  createNewTask(text) {\n    return {\n      text: text,\n      className: '',\n      id: this.maxID++,\n      done: false,\n      display: 'block'\n    };\n  }\n\n  getIndex(id) {\n    return this.state.listToDo.findIndex(el => el.id === id);\n  }\n\n  getNewListToDo() {\n    return JSON.parse(JSON.stringify(this.state.listToDo));\n  }\n\n  render() {\n    const {\n      listToDo\n    } = this.state;\n    const countTaskLeft = listToDo.filter(({\n      done\n    }) => done === false).length;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        createNewTask: this.createNewTask,\n        addElement: this.addElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        addElement: this.addElement,\n        changeStatus: this.changeStatus,\n        taskEditing: this.taskEditing,\n        createNewTask: this.createNewTask,\n        taskList: this.state.listToDo,\n        editingTask: this.editingTask,\n        deleteTask: this.deleteTask,\n        editTask: this.editTask,\n        countTaskLeft: countTaskLeft,\n        showMePls: this.showMePls\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this);\n  }\n\n} //\n// changeStatus= (id)=>{\n//\n//     this.setState(({listToDo})=>{\n//         const newList = this.getNewListToDo();\n//         const task = this.getTaskFromState(id, newList)\n//         if( task.done === false){\n//             task.className = 'completed';\n//             task.done = true;\n//         } else {\n//             task.className = '';\n//             task.done = false\n//         }\n//         return {\n//             listToDo: newList\n//         }\n//     })\n// }\n//\n// deleteTask =(id)=>{\n//     this.setState(({listToDo})=>{\n//         const newList = this.getNewListToDo();\n//         const inx = this.getIndex(id)\n//         newList.splice(inx, 1)\n//         return {\n//             listToDo: newList\n//         }\n//     })\n// }\n//\n//\n//\n// editingTask= (id)=>{\n//     this.setState(({listToDo})=>{\n//         const newList = this.getNewListToDo();\n//         const task = this.getTaskFromState(id,newList)\n//         task.className = 'editing';\n//         return {\n//             listToDo: newList\n//         }\n//     })\n// }\n//\n// editTask =(id,event)=>{\n//     if(event.keyCode == 13){\n//         this.setState(({listToDo})=>{\n//             const val = event.target.value\n//             const newList = this.getNewListToDo();\n//             const task = this.getTaskFromState(id,newList)\n//             task.text = val\n//             task.done === false?  task.className = '': task.className = 'completed'\n//             return {\n//                 listToDo: newList\n//             }\n//         })\n//     }\n//\n// }\n// addElement =()=>{\n//     this.setState(({listToDo})=>{\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\n//         const newElement = this.createNewTask('random')\n//         newArr.unshift(newElement)\n//         return  {\n//             listToDo: newArr\n//         }\n//     })\n// }","map":{"version":3,"sources":["D:/project/react/todo/src/components/app/app.js"],"names":["React","Component","Header","Main","App","maxID","state","listToDo","createNewTask","getTaskFromState","id","newList","index","getIndex","changeState","cb","setState","newListToDo","getNewListToDo","task","showMePls","label","filter","map","el","display","console","log","addElement","text","newElement","unshift","changeStatus","arg1","arg2","done","className","deleteTask","splice","editingTask","editTask","event","arg","keyCode","target","value","findIndex","JSON","parse","stringify","render","countTaskLeft","length","taskEditing"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Header from \"../header/header\";\r\nimport Main from \"../main/main\";\r\nimport './app.css'\r\n\r\nexport default class App extends Component{\r\n\r\n    maxID = 666;\r\n    state = {\r\n        listToDo: [\r\n            this.createNewTask('Completed'),\r\n            this.createNewTask('Editing'),\r\n            this.createNewTask('Active'),\r\n            this.createNewTask('Закончить приложение'),\r\n        ]\r\n    }\r\n\r\n    createNewTask (text){\r\n        return {\r\n            text: text,\r\n            className: '',\r\n            id:  this.maxID++,\r\n            done: false,\r\n            display: 'block'\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getIndex (id){\r\n           return this.state.listToDo.findIndex((el)=>el.id === id);\r\n    }\r\n\r\n    getNewListToDo (){\r\n        return JSON.parse(JSON.stringify(this.state.listToDo));\r\n    }\r\n\r\n    getTaskFromState = (id,newList)=>{\r\n        const index = this.getIndex(id);\r\n        return newList[index];\r\n    }\r\n\r\n    changeState = (id, cb)=>{\r\n        this.setState(({listToDo})=>{\r\n            let newListToDo = this.getNewListToDo();\r\n            const task = this.getTaskFromState(id, newListToDo);\r\n            const index = this.getIndex(id);\r\n            cb(newListToDo, index, task);\r\n            return {\r\n                listToDo: newListToDo\r\n            }\r\n        });\r\n    }\r\n\r\n    showMePls =(label)=>{\r\n        this.changeState(666, (newListToDo, index, task)=>{\r\n\r\n            const filter = newListToDo.map((el)=> {\r\n                el.display = 'none'\r\n                console.log(el.display)\r\n            })\r\n            console.log(filter)\r\n            // return {\r\n            //     listToDo: filter\r\n            // }\r\n            newListToDo = filter;\r\n\r\n            // console.log(filter)\r\n            // if(label === 'All'){\r\n            //     console.log(newListToDo)\r\n            // }else if(label === ''){\r\n            // }else if(label === ''){\r\n            // }\r\n        })\r\n    }\r\n\r\n\r\n    addElement =(text)=>{\r\n        this.changeState(666, (newListToDo)=>{\r\n            const newElement = this.createNewTask(text)\r\n            newListToDo.unshift(newElement)\r\n        })\r\n    }\r\n\r\n\r\n    changeStatus= (id)=>{\r\n            this.changeState(id, (arg1, arg2, task)=> {\r\n            if( task.done === false){\r\n                task.className = 'completed';\r\n                task.done = true;\r\n            } else {\r\n                task.className = '';\r\n                task.done = false;\r\n            }\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    deleteTask =(id)=>{\r\n        this.changeState(id, (newListToDo, index)=>  newListToDo.splice(index, 1));\r\n\r\n    }\r\n\r\n\r\n\r\n    editingTask= (id)=>{\r\n        this.changeState(id, (arg1, arg2, task)=>{\r\n            task.className = 'editing';\r\n        });\r\n    }\r\n\r\n    editTask =(id,event)=>{\r\n        this.changeState(id, (arg, arg2, task)=>{\r\n            if (event.keyCode == 13) {\r\n                task.text = event.target.value;\r\n                task.done === false ? task.className = '' : task.className = 'completed';\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const {listToDo} = this.state;\r\n        const  countTaskLeft = listToDo.filter(({done})=>done ===false).length;\r\n    return (\r\n        <section className='todoapp'>\r\n            <Header  createNewTask={this.createNewTask}\r\n                     addElement={this.addElement}/>\r\n            <Main addElement={this.addElement}\r\n                  changeStatus={this.changeStatus}\r\n                  taskEditing={this.taskEditing}\r\n                  createNewTask={this.createNewTask}\r\n                  taskList={this.state.listToDo}\r\n                  editingTask={this.editingTask}\r\n                  deleteTask={this.deleteTask}\r\n                  editTask={this.editTask}\r\n                  countTaskLeft={countTaskLeft}\r\n                  showMePls={this.showMePls}\r\n               />\r\n        </section>\r\n    );\r\n}\r\n\r\n}\r\n//\r\n// changeStatus= (id)=>{\r\n//\r\n//     this.setState(({listToDo})=>{\r\n//         const newList = this.getNewListToDo();\r\n//         const task = this.getTaskFromState(id, newList)\r\n//         if( task.done === false){\r\n//             task.className = 'completed';\r\n//             task.done = true;\r\n//         } else {\r\n//             task.className = '';\r\n//             task.done = false\r\n//         }\r\n//         return {\r\n//             listToDo: newList\r\n//         }\r\n//     })\r\n// }\r\n//\r\n// deleteTask =(id)=>{\r\n//     this.setState(({listToDo})=>{\r\n//         const newList = this.getNewListToDo();\r\n//         const inx = this.getIndex(id)\r\n//         newList.splice(inx, 1)\r\n//         return {\r\n//             listToDo: newList\r\n//         }\r\n//     })\r\n// }\r\n//\r\n//\r\n//\r\n// editingTask= (id)=>{\r\n//     this.setState(({listToDo})=>{\r\n//         const newList = this.getNewListToDo();\r\n//         const task = this.getTaskFromState(id,newList)\r\n//         task.className = 'editing';\r\n//         return {\r\n//             listToDo: newList\r\n//         }\r\n//     })\r\n// }\r\n//\r\n// editTask =(id,event)=>{\r\n//     if(event.keyCode == 13){\r\n//         this.setState(({listToDo})=>{\r\n//             const val = event.target.value\r\n//             const newList = this.getNewListToDo();\r\n//             const task = this.getTaskFromState(id,newList)\r\n//             task.text = val\r\n//             task.done === false?  task.className = '': task.className = 'completed'\r\n//             return {\r\n//                 listToDo: newList\r\n//             }\r\n//         })\r\n//     }\r\n//\r\n// }\r\n\r\n\r\n\r\n\r\n// addElement =()=>{\r\n//     this.setState(({listToDo})=>{\r\n//         const newArr =  JSON.parse(JSON.stringify(listToDo))\r\n//         const newElement = this.createNewTask('random')\r\n//         newArr.unshift(newElement)\r\n//         return  {\r\n//             listToDo: newArr\r\n//         }\r\n//     })\r\n// }\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}